---
/**
 * @component Card
 *
 * @description
 * Card 组件用于在页面中展示相关内容的容器，通常包含标题、描述和可选的图片。
 * 组件设计简洁大方，具有平滑的动画效果和交互反馈，适合展示产品、文章或功能介绍等内容。
 *
 * @design
 * 设计理念：
 * 1. 视觉层次感 - 通过阴影、悬停效果和微妙的动画创造深度感
 * 2. 内容聚焦 - 简洁的布局让用户关注卡片内容
 * 3. 交互反馈 - 悬停和点击时提供明确的视觉反馈
 * 4. 适应性强 - 响应式设计，适应不同屏幕尺寸
 *
 * 视觉特点：
 * - 半透明背景：现代感强，适合叠加在各种背景上
 * - 模糊效果：背景模糊增强内容可读性
 * - 光效设计：顶部有微妙的光晕效果，增强立体感
 * - 悬停动画：轻微放大和阴影增强，提供交互反馈
 * - 图片缩放：图片在悬停时轻微放大，增强视觉吸引力
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Card
 *   title="卡片标题"
 *   subtitle="卡片描述文本"
 * >
 *   卡片内容
 * </Card>
 * ```
 *
 * 带图片的卡片：
 * ```astro
 * <Card
 *   title="产品名称"
 *   subtitle="产品描述"
 *   imageUrl="/path/to/image.jpg"
 * >
 *   其他产品信息
 * </Card>
 * ```
 *
 * 可点击的卡片（链接）：
 * ```astro
 * <Card
 *   title="文章标题"
 *   subtitle="文章摘要"
 *   imageUrl="/path/to/image.jpg"
 *   href="/articles/article-slug"
 * />
 * ```
 *
 * @props
 * @prop {string} [title] - 卡片标题
 * @prop {string} [subtitle] - 卡片副标题或描述
 * @prop {string} [imageUrl] - 卡片顶部图片的URL
 * @prop {string} [href] - 如果提供，卡片将变成可点击的链接
 * @prop {string} [class] - 自定义CSS类，可用于覆盖默认样式
 *
 * @slots
 * @slot default - 卡片的主要内容区域
 *
 * @accessibility
 * - 使用语义化HTML结构
 * - 当作为链接使用时，确保提供有意义的文本内容
 * - 动画遵循 prefers-reduced-motion 媒体查询，尊重用户的动画偏好设置
 */

import '../../style.ts';

interface Props {
	title?: string;
	subtitle?: string;
	imageUrl?: string;
	href?: string;
	class?: string;
}

const { title, subtitle, imageUrl, href, class: className = '' } = Astro.props;

// 定义卡片的CSS类
const cardClasses = [
	'cosy:bg-base-100',
	'cosy:bg-opacity-70',
	'cosy:backdrop-blur-sm',
	'cosy:rounded-xl',
	'cosy:shadow-md',
	'cosy:overflow-hidden',
	'cosy:transition-all',
	'cosy:duration-300',
	'cosy:ease-in-out',
	'cosy:hover:shadow-lg',
	'cosy:hover:scale-[1.02]',
	className,
].join(' ');

// 定义卡片内容的CSS类
const cardBodyClasses = [
	'cosy:p-6',
	'cosy:flex',
	'cosy:flex-col',
	'cosy:gap-4',
	href && 'cosy:cursor-pointer',
]
	.filter(Boolean)
	.join(' ');

// 定义图片容器的CSS类
const figureClasses = 'cosy:overflow-hidden cosy:mb-4 cosy:-mx-6 cosy:-mt-6';

// 定义图片的CSS类
const imageClasses =
	'cosy:w-full cosy:h-auto cosy:object-cover cosy:transition-transform cosy:duration-300 cosy:group-hover:scale-105';

// 定义标题的CSS类
const titleClasses = 'cosy:text-xl cosy:font-bold cosy:mb-2';

// 定义描述的CSS类
const subtitleClasses = 'cosy:text-base cosy:text-gray-600 cosy:dark:text-gray-300';
---

<div class="cosy:group cosy:perspective-1000">
	<div class={cardClasses}>
		{
			href ? (
				<a href={href} class={cardBodyClasses}>
					{imageUrl && (
						<figure class={figureClasses}>
							<img src={imageUrl} alt={title} class={imageClasses} />
						</figure>
					)}
					{title && <h2 class={titleClasses}>{title}</h2>}
					{subtitle && <p class={subtitleClasses}>{subtitle}</p>}
					<slot />
				</a>
			) : (
				<div class={cardBodyClasses}>
					{imageUrl && (
						<figure class={figureClasses}>
							<img src={imageUrl} alt={title} class={imageClasses} />
						</figure>
					)}
					{title && <h2 class={titleClasses}>{title}</h2>}
					{subtitle && <p class={subtitleClasses}>{subtitle}</p>}
					<slot />
				</div>
			)
		}
	</div>
</div>

<style>
	/* 为了确保prefers-reduced-motion生效 */
	@media (prefers-reduced-motion: reduce) {
		.cosy\:hover\:scale-\[1\.02\]:hover,
		.cosy\:group-hover\:scale-105 {
			transform: none !important;
		}
	}
</style>
