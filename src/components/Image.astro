---
import { Image as AstroImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  /**
   * 图片源，可以是本地图片或远程URL
   */
  src: ImageMetadata | string;
  /**
   * 图片的替代文本
   */
  alt: string;
  /**
   * 图片的宽度
   */
  width?: number;
  /**
   * 图片的高度
   */
  height?: number;
  /**
   * 图片的加载方式
   * @default "lazy"
   */
  loading?: 'lazy' | 'eager';
  /**
   * 图片的填充方式
   * @default "cover"
   */
  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
  /**
   * 图片的位置
   * @default "center"
   */
  objectPosition?: string;
  /**
   * 是否显示加载中的占位图
   * @default true
   */
  showPlaceholder?: boolean;
  /**
   * 是否显示加载失败的错误图
   * @default true
   */
  showError?: boolean;
  /**
   * 自定义类名
   */
  class?: string;
  /**
   * 是否启用图片懒加载
   * @default true
   */
  lazy?: boolean;
  /**
   * 图片的圆角大小
   * @default "none"
   */
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | 'full';
  /**
   * 图片的阴影效果
   * @default "none"
   */
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
  /**
   * 图片的悬停效果
   * @default "none"
   */
  hover?: 'none' | 'scale' | 'brightness' | 'blur';
  /**
   * 图片的过渡动画
   * @default "none"
   */
  transition?: 'none' | 'fade' | 'slide' | 'zoom';
}

const {
  src,
  alt,
  width,
  height,
  loading = 'lazy',
  objectFit = 'cover',
  objectPosition = 'center',
  showPlaceholder = true,
  showError = true,
  class: className = '',
  lazy = true,
  rounded = 'none',
  shadow = 'none',
  hover = 'none',
  transition = 'none',
} = Astro.props;

// 处理类名
const classes = [
  'relative',
  // 圆角
  rounded !== 'none' && `rounded-${rounded}`,
  // 阴影
  shadow !== 'none' && `shadow-${shadow}`,
  // 悬停效果
  hover !== 'none' && {
    'scale': 'hover:scale-105',
    'brightness': 'hover:brightness-110',
    'blur': 'hover:blur-sm',
  }[hover],
  // 过渡动画
  transition !== 'none' && {
    'fade': 'transition-opacity duration-300',
    'slide': 'transition-transform duration-300',
    'zoom': 'transition-all duration-300',
  }[transition],
  className,
].filter(Boolean).join(' ');

// 处理图片样式
const imageStyles = {
  objectFit,
  objectPosition,
};

// 判断是否为本地图片
const isLocalImage = typeof src !== 'string' && 'src' in src;
---

<div class={classes}>
  <div class="relative w-full h-full">
    {isLocalImage ? (
      <AstroImage
        src={src}
        alt={alt}
        width={width}
        height={height}
        loading={loading}
        class="w-full h-full opacity-0 transition-opacity duration-300"
        style={imageStyles}
      />
    ) : (
      <img
        src={src}
        alt={alt}
        width={width}
        height={height}
        loading={loading}
        class="w-full h-full opacity-0 transition-opacity duration-300"
        style={imageStyles}
      />
    )}

    {/* 加载占位图 */}
    {showPlaceholder && (
      <div class="absolute inset-0 bg-base-200 animate-pulse" />
    )}

    {/* 错误占位图 */}
    {showError && (
      <div class="absolute inset-0 bg-error/10 flex items-center justify-center hidden">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-error" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
        </svg>
      </div>
    )}
  </div>
</div>

<script>
  // 处理图片加载状态
  function handleImageLoad(img) {
    // 移除加载占位图
    const placeholder = img.parentElement?.querySelector('.animate-pulse');
    if (placeholder) {
      placeholder.classList.add('opacity-0');
      setTimeout(() => {
        placeholder.remove();
      }, 300);
    }

    // 添加加载完成动画
    img.classList.add('opacity-100');
  }

  // 处理图片加载错误
  function handleImageError(img) {
    // 移除加载占位图
    const placeholder = img.parentElement?.querySelector('.animate-pulse');
    if (placeholder) {
      placeholder.classList.add('opacity-0');
      setTimeout(() => {
        placeholder.remove();
      }, 300);
    }

    // 显示错误占位图
    const errorPlaceholder = img.parentElement?.querySelector('.bg-error\\/10');
    if (errorPlaceholder) {
      errorPlaceholder.classList.remove('hidden');
    }
  }

  // 初始化图片加载处理
  function initializeImageHandlers() {
    const images = document.querySelectorAll('img[loading="lazy"]');
    images.forEach(img => {
      if (img instanceof HTMLImageElement) {
        // 如果图片已经加载完成
        if (img.complete) {
          handleImageLoad(img);
        } else {
          // 添加加载事件监听
          img.addEventListener('load', () => handleImageLoad(img));
          img.addEventListener('error', () => handleImageError(img));
        }
      }
    });
  }

  // 页面加载时初始化
  document.addEventListener('astro:page-load', initializeImageHandlers);
  // 初始加载时也初始化
  initializeImageHandlers();
</script>

<style>
  /* 过渡动画 */
  .transition-opacity {
    transition-property: opacity;
  }

  .transition-transform {
    transition-property: transform;
  }

  .transition-all {
    transition-property: all;
  }

  /* 悬停效果 */
  .hover\:scale-105:hover {
    transform: scale(1.05);
  }

  .hover\:brightness-110:hover {
    filter: brightness(1.1);
  }

  .hover\:blur-sm:hover {
    filter: blur(4px);
  }
</style> 