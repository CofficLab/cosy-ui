---
interface Props {
  code: string;
  lang?: string;
  title?: string;
  showLineNumbers?: boolean;
}

const {
  code,
  lang = 'plaintext',
  title,
  showLineNumbers = true,
} = Astro.props;

// 移除代码字符串开头和结尾的空行
const trimmedCode = code.trim();

// 生成行号
const lines = trimmedCode.split('\n');
const lineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1);
---

<div class="code-block not-prose rounded-lg border border-base-300 bg-base-200 my-4">
  {/* 标题栏 */}
  {title && (
    <div class="flex items-center justify-between px-4 py-2 border-b border-base-300">
      <span class="text-sm font-medium">{title}</span>
      <button
        class="copy-button btn btn-ghost btn-xs gap-1"
        data-code={trimmedCode}
        title="复制代码"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
          <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
        </svg>
        <span class="copy-text">复制</span>
      </button>
    </div>
  )}

  {/* 代码区域 */}
  <div class="relative">
    {/* 行号 */}
    {showLineNumbers && (
      <div class="hidden md:block absolute left-0 top-0 bottom-0 px-4 py-4 select-none text-base-content/50 bg-base-300 border-r border-base-300">
        {lineNumbers.map(num => (
          <div class="text-right leading-6 text-sm">{num}</div>
        ))}
      </div>
    )}

    {/* 代码内容 */}
    <pre class={`language-${lang} ${showLineNumbers ? 'pl-[3.5rem]' : 'px-4'} py-4 m-0 overflow-x-auto`}><code class={`language-${lang}`} set:html={trimmedCode} /></pre>
  </div>
</div>

<script>
  function initializeCopyButtons() {
    const copyButtons = document.querySelectorAll('.copy-button');
    
    copyButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const code = button.getAttribute('data-code') || '';
        const copyText = button.querySelector('.copy-text');
        
        try {
          await navigator.clipboard.writeText(code);
          if (copyText) {
            copyText.textContent = '已复制！';
            setTimeout(() => {
              copyText.textContent = '复制';
            }, 2000);
          }
        } catch (err) {
          console.error('复制失败:', err);
          if (copyText) {
            copyText.textContent = '复制失败';
            setTimeout(() => {
              copyText.textContent = '复制';
            }, 2000);
          }
        }
      });
    });
  }

  // 在页面加载时初始化
  initializeCopyButtons();

  // 在 Astro 页面切换时重新初始化
  document.addEventListener('astro:page-load', initializeCopyButtons);
</script>

<style is:global>
  /* Prism.js 暗色主题自定义 */
  .code-block pre {
    background: transparent !important;
  }
  
  .code-block code {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
    font-size: 0.875rem;
    line-height: 1.5rem;
  }

  /* 代码高亮颜色 */
  .token.comment,
  .token.prolog,
  .token.doctype,
  .token.cdata {
    color: #636f88;
  }

  .token.punctuation {
    color: #81a1c1;
  }

  .namespace {
    opacity: 0.7;
  }

  .token.property,
  .token.tag,
  .token.constant,
  .token.symbol,
  .token.deleted {
    color: #81a1c1;
  }

  .token.number {
    color: #b48ead;
  }

  .token.boolean {
    color: #81a1c1;
  }

  .token.selector,
  .token.attr-name,
  .token.string,
  .token.char,
  .token.builtin,
  .token.inserted {
    color: #a3be8c;
  }

  .token.operator,
  .token.entity,
  .token.url,
  .language-css .token.string,
  .style .token.string,
  .token.variable {
    color: #81a1c1;
  }

  .token.atrule,
  .token.attr-value,
  .token.function,
  .token.class-name {
    color: #88c0d0;
  }

  .token.keyword {
    color: #81a1c1;
  }

  .token.regex,
  .token.important {
    color: #ebcb8b;
  }

  .token.important,
  .token.bold {
    font-weight: bold;
  }

  .token.italic {
    font-style: italic;
  }

  .token.entity {
    cursor: help;
  }
</style> 