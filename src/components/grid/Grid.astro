---
/**
 * @component Grid
 *
 * @description
 * Grid 组件是一个灵活的网格布局组件，用于创建响应式的多列布局。
 * 它封装了 CSS Grid 的常用功能，提供简单易用的接口来控制网格的列数和间距。
 *
 * @design
 * 设计理念：
 * 1. 简单易用 - 通过简洁的 API 控制复杂的 Grid 布局
 * 2. 响应式优先 - 内置响应式断点，轻松创建适应不同屏幕尺寸的布局
 * 3. 灵活可配置 - 支持自定义列数和间距
 * 4. 语义化属性 - 使用直观的属性名称，降低学习成本
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Grid cols={3} gap="md">
 *   <div>第一列</div>
 *   <div>第二列</div>
 *   <div>第三列</div>
 * </Grid>
 * ```
 *
 * 响应式网格：
 * ```astro
 * <Grid cols={{base: 1, md: 2, lg: 3}} gap="lg">
 *   <div>响应式网格</div>
 *   <div>在不同屏幕尺寸下</div>
 *   <div>显示不同的列数</div>
 * </Grid>
 * ```
 *
 * 自定义行列间距：
 * ```astro
 * <Grid cols={2} rowGap="lg" colGap="sm">
 *   <div>行间距大</div>
 *   <div>列间距小</div>
 *   <div>第三项</div>
 *   <div>第四项</div>
 * </Grid>
 * ```
 *
 * @props
 * @prop {number | Object} [cols=1] - 网格列数，可以是固定值或响应式对象
 * @prop {string} [gap="md"] - 网格间距，可选值：none, xs, sm, md, lg, xl
 * @prop {string} [rowGap] - 行间距，默认与 gap 相同
 * @prop {string} [colGap] - 列间距，默认与 gap 相同
 * @prop {string} [class] - 自定义类名
 * @prop {any} [class:list] - 类名列表
 */

// 导入样式
import '../../style.ts';

import type { HTMLAttributes } from 'astro/types';

type GapSize = 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
type Breakpoint = 'base' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';

type ResponsiveValue<T> =
	| T
	| {
			base?: T;
			sm?: T;
			md?: T;
			lg?: T;
			xl?: T;
			'2xl'?: T;
	  };

interface Props extends HTMLAttributes<'div'> {
	/**
	 * 网格列数，可以是固定值或响应式对象
	 * @default 1
	 */
	cols?: ResponsiveValue<number>;

	/**
	 * 网格间距
	 * @default "md"
	 */
	gap?: GapSize;

	/**
	 * 行间距，默认与gap相同
	 */
	rowGap?: GapSize;

	/**
	 * 列间距，默认与gap相同
	 */
	colGap?: GapSize;

	/**
	 * 自定义类名
	 */
	class?: string;

	/**
	 * 类名列表
	 */
	'class:list'?: any;
}

const {
	cols = 1,
	gap = 'md',
	rowGap,
	colGap,
	class: className = '',
	'class:list': classList,
	...rest
} = Astro.props;

// 处理响应式列数
const getColsClasses = (cols: ResponsiveValue<number>) => {
	if (typeof cols === 'number') {
		return `cosy:grid-cols-${cols}`;
	}

	const breakpoints: Record<Breakpoint, string> = {
		base: '',
		sm: 'sm:',
		md: 'md:',
		lg: 'lg:',
		xl: 'xl:',
		'2xl': '2xl:',
	};

	return Object.entries(cols)
		.map(([breakpoint, value]) => {
			if (breakpoint === 'base') {
				return `cosy:grid-cols-${value}`;
			}
			return `cosy:${breakpoints[breakpoint as Breakpoint]}grid-cols-${value}`;
		})
		.join(' ');
};

// 间距映射
const gapClasses: Record<GapSize, string> = {
	none: 'cosy:gap-0',
	xs: 'cosy:gap-2',
	sm: 'cosy:gap-4',
	md: 'cosy:gap-6',
	lg: 'cosy:gap-8',
	xl: 'cosy:gap-12',
};

// 行间距映射
const rowGapClasses: Record<GapSize, string> = {
	none: 'cosy:row-gap-0',
	xs: 'cosy:row-gap-2',
	sm: 'cosy:row-gap-4',
	md: 'cosy:row-gap-6',
	lg: 'cosy:row-gap-8',
	xl: 'cosy:row-gap-12',
};

// 列间距映射
const colGapClasses: Record<GapSize, string> = {
	none: 'cosy:col-gap-0',
	xs: 'cosy:col-gap-2',
	sm: 'cosy:col-gap-4',
	md: 'cosy:col-gap-6',
	lg: 'cosy:col-gap-8',
	xl: 'cosy:col-gap-12',
};

// 构建最终类名
const gridClasses = [
	'cosy:grid',
	getColsClasses(cols),
	rowGap
		? rowGapClasses[rowGap as GapSize]
		: colGap
			? gapClasses[gap as GapSize]
			: gapClasses[gap as GapSize],
	colGap ? colGapClasses[colGap as GapSize] : null,
	className,
]
	.filter(Boolean)
	.join(' ');
---

<div class:list={[gridClasses, classList]} {...rest}>
	<slot />
</div>
