---
/**
 * Container组件
 * 
 * 一个基础的容器组件，用于限制内容宽度并居中显示
 * 
 * @example
 * ```astro
 * <Container>
 *   <p>内容将被限制在一个合理的宽度内并居中显示</p>
 * </Container>
 * 
 * <Container size="sm" padding="lg">
 *   <p>小尺寸容器，大内边距</p>
 * </Container>
 * ```
 */

import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'div'> {
  /**
   * 容器尺寸
   * @default "md"
   */
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full';
  
  /**
   * 内边距大小
   * @default "md"
   */
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  
  /**
   * 是否居中显示
   * @default true
   */
  centered?: boolean;
  
  /**
   * 自定义类名
   */
  class?: string;
  
  /**
   * 类名列表
   */
  'class:list'?: any;
}

const {
  size = 'md',
  padding = 'md',
  centered = true,
  class: className = '',
  'class:list': classList,
  ...rest
} = Astro.props;

// 容器尺寸
const sizeClasses = {
  xs: 'max-w-screen-xs',
  sm: 'max-w-screen-sm',
  md: 'max-w-screen-md',
  lg: 'max-w-screen-lg',
  xl: 'max-w-screen-xl',
  full: 'max-w-full'
};

// 内边距
const paddingClasses = {
  none: 'px-0',
  sm: 'px-4',
  md: 'px-6',
  lg: 'px-8',
  xl: 'px-12'
};

// 构建最终类名
const containerClasses = [
  'w-full',
  sizeClasses[size],
  paddingClasses[padding],
  centered ? 'mx-auto' : '',
  className
].filter(Boolean).join(' ');
---

<div class:list={[containerClasses, classList]} {...rest}>
  <slot />
</div>

<style>
  /* 响应式调整 */
  @media (max-width: 640px) {
    .px-6 {
      padding-left: 1rem;
      padding-right: 1rem;
    }
    
    .px-8, .px-12 {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }
  }
</style> 
