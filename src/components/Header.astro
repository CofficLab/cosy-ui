---
import { Image } from 'astro:assets';
import { RiSearch2Line, RiMenuLine, RiSunCloudyLine } from '@remixicon/vue';
import ThemeItem from './ThemeItem.astro';
import Link from './Link.astro';

interface Props {
	logo: ImageMetadata;
	languages?: Array<{ code: string; name: string }>;
	currentLocale?: string;
	navItems?: Array<{
		href: string;
		label: string;
		match: (path: string) => boolean;
	}>;
	socialLinks?: Array<{
		name: string;
		url: string;
		icon: any;
	}>;
}

const {
	logo,
	languages = [
		{ code: 'zh-cn', name: '简体中文' },
		{ code: 'en', name: 'English' },
	],
	currentLocale = 'zh-cn',
	navItems = [],
} = Astro.props;

const currentLanguageName =
	languages.find((lang) => lang.code === currentLocale)?.name || '简体中文';

const themes = [
	{ id: 'default', name: 'Default' },
	{ id: 'light', name: 'Light' },
	{ id: 'dark', name: 'Dark' },
	{ id: 'pastel', name: 'Pastel' },
	{ id: 'lemonade', name: 'Lemonade' },
	{ id: 'cupcake', name: 'Cupcake' },
	{ id: 'nord', name: 'Nord' },
	{ id: 'business', name: 'Business' },
	{ id: 'luxury', name: 'Luxury' },
];

const currentPath = Astro.url.pathname;

// 为每个语言生成对应的URL
function generateLanguageUrl(langCode: string): string {
	const pathParts = currentPath.split('/').filter(Boolean);
	const firstPathPart = pathParts[0];
	const supportedLanguages = languages.map((lang) => lang.code);
	const isFirstPartLang = supportedLanguages.includes(firstPathPart);

	if (isFirstPartLang) {
		pathParts[0] = langCode;
		return '/' + pathParts.join('/');
	} else {
		return '/' + langCode + (currentPath === '/' ? '' : currentPath);
	}
}
---

<header
	class="bg-gradient-to-r from-neutral-900/80 via-neutral-800/80 to-neutral-900/80
	dark:from-neutral-800/80 dark:via-neutral-700/80 dark:to-neutral-800/80 backdrop-blur
	flex flex-row justify-between
	text-neutral-200 dark:text-neutral-300
	px-4
	rounded-lg h-12 mt-1 mx-4 fixed top-0 left-0 right-0 z-50
	border border-white/5 dark:border-black/5">
	<div class="flex flex-row justify-start items-center">
		<Link href="/" transition:persist>
			<div class="h-8 w-8 flex flex-col items-center justify-center">
				<Image src={logo} alt="logo" class="fill-current" />
			</div>
		</Link>

		<!-- 移动端菜单按钮 -->
		<button class="lg:hidden btn btn-ghost btn-sm p-1 ml-2" onclick="mobile_menu.showModal()">
			<RiMenuLine class="w-5 h-5" />
		</button>

		<!-- 桌面端导航 -->
		<div class="hidden lg:flex flex-row gap-4 items-center ml-4" transition:animate="fade">
			{navItems.map((item) => <Link href={item.href}>{item.label}</Link>)}
		</div>
	</div>

	<div class="h-12 flex flex-row justify-end gap-2 items-center">
		<div class="dropdown dropdown-end">
			<div tabindex={0} role="button" class="btn btn-ghost btn-sm p-1">
				{currentLanguageName}
			</div>
			<ul
				tabindex={0}
				class="dropdown-content menu bg-slate-900 dark:bg-slate-800 rounded-box z-[1] w-40 p-2 shadow-lg">
				{
					languages.map((lang) => (
						<li>
							<Link href={generateLanguageUrl(lang.code)}>{lang.name}</Link>
						</li>
					))
				}
			</ul>
		</div>
		<div class="dropdown dropdown-end">
			<div tabindex={0} role="button" class="btn btn-ghost btn-sm p-1">
				<RiSunCloudyLine class="w-5 h-5" />
			</div>
			<ul
				tabindex={0}
				class="dropdown-content menu bg-neutral-900 dark:bg-neutral-800 rounded-box z-[1] w-56 p-2 shadow-lg">
				{themes.map((theme) => <ThemeItem theme={theme.id} label={theme.name} />)}
			</ul>
		</div>
		<button class="btn btn-ghost btn-sm p-1" onclick="my_modal_1.showModal()">
			<RiSearch2Line class="w-5 h-5" />
		</button>
	</div>
</header>

<!-- 移动端菜单模态框 -->
<dialog id="mobile_menu" class="modal">
	<div class="modal-box bg-neutral-900 dark:bg-neutral-800 text-neutral-200 dark:text-neutral-300">
		<h3 class="font-bold text-lg mb-4">
			{currentLocale === 'zh-cn' ? '菜单' : 'Menu'}
		</h3>
		<div class="flex flex-col gap-2">
			{
				navItems.map((item) => (
					<a
						class:list={[
							'btn btn-sm w-full text-left justify-start',
							{
								'btn-ghost': !item.match(currentPath),
								'btn-primary': item.match(currentPath),
							},
						]}
						href={item.href}>
						{item.label}
					</a>
				))
			}
		</div>
		<div class="modal-action">
			<form method="dialog">
				<button class="btn">
					{currentLocale === 'zh-cn' ? '关闭' : 'Close'}
				</button>
			</form>
		</div>
	</div>
	<form method="dialog" class="modal-backdrop bg-black/20 backdrop-blur-sm">
		<button>关闭</button>
	</form>
</dialog>

<!-- 搜索模态框 -->
<!-- <dialog id="my_modal_1" class="modal">
	<div
		class="modal-box bg-neutral-900 dark:bg-neutral-800 text-neutral-200 dark:text-neutral-300">
		<Search />
		<div class="modal-action">
			<form method="dialog">
				<button class="btn">
					{currentLocale === 'zh-cn' ? '关闭' : 'Close'}
				</button>
			</form>
		</div>
	</div>
	<form method="dialog" class="modal-backdrop bg-black/20 backdrop-blur-sm">
		<button>关闭</button>
	</form>
</dialog> -->

<style is:global>
	.pagefind-ui {
		--pagefind-ui-scale: 0.75;
		--pagefind-ui-primary: navy;
		--pagefind-ui-text: black;
		--pagefind-ui-border: slategrey;
		--pagefind-ui-border-width: 1px;
		--pagefind-ui-border-radius: 0.25rem;
		--pagefind-ui-font: sans-serif;
		width: 100%;
	}

	.pagefind-ui.yellow {
		--pagefind-ui-background: lightyellow;
	}

	.pagefind-ui.red {
		--pagefind-ui-background: peachpuff;
		width: 100%;
	}

	.pagefind-ui .pagefind-ui__drawer:not(.pagefind-ui__hidden) {
		position: relative;
		padding: 0;
		box-shadow: none;
		background-color: transparent;
	}

	.pagefind-ui .pagefind-ui__result-link {
		color: var(--pagefind-ui-primary);
	}

	.pagefind-ui .pagefind-ui__result-excerpt {
		color: var(--pagefind-ui-text);
	}

	/* 响应式调整 */
	@media (max-width: 1023px) {
		.modal-box {
			max-height: 80vh;
			overflow-y: auto;
		}
	}

	/* 模态框动画 */
	.modal {
		transition-duration: 200ms;
	}

	.modal-box {
		transition-duration: 300ms;
		transform-origin: center;
	}

	@keyframes slideUp {
		from {
			transform: translateY(1rem);
			opacity: 0;
		}
		to {
			transform: translateY(0);
			opacity: 1;
		}
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	.modal[open] .modal-box {
		animation: slideUp 0.3s ease-out forwards;
	}

	.modal[open] .modal-backdrop {
		animation: fadeIn 0.2s ease-out forwards;
	}
</style>

<script>
	function initializeThemeSwitch() {
		const themeItems = document.querySelectorAll('[data-set-theme]');
		const updateActiveTheme = (currentTheme) => {
			themeItems.forEach((item) => {
				const themeId = item.getAttribute('data-set-theme');
				const isActive = themeId === currentTheme;
				item.classList.toggle('bg-primary', isActive);
				item.classList.toggle('text-primary-content', isActive);
			});
		};

		themeItems.forEach((item) => {
			// 移除可能存在的旧事件监听器
			item.removeEventListener('click', handleThemeClick);
			// 添加新的事件监听器
			item.addEventListener('click', handleThemeClick);
		});

		function handleThemeClick(event) {
			const item = event.currentTarget;
			const theme = item.getAttribute('data-set-theme');
			document.documentElement.setAttribute('data-theme', theme ?? 'default');
			localStorage.setItem('theme', theme ?? 'default');
			updateActiveTheme(theme ?? 'default');
		}

		// 从本地存储中获取主题并更新激活状态
		const savedTheme = localStorage.getItem('theme') || 'default';
		document.documentElement.setAttribute('data-theme', savedTheme);
		updateActiveTheme(savedTheme);
	}

	// 初始加载时初始化
	document.addEventListener('DOMContentLoaded', initializeThemeSwitch);

	// Astro view transitions 后重新初始化
	document.addEventListener('astro:after-swap', initializeThemeSwitch);
</script>
