---
import { AlertTriangle } from '../icons';

// 自定义图片元数据接口
interface ImageMetadata {
  src: string;
  width: number;
  height: number;
  format: string;
}

interface Props {
  /**
   * 图片源，可以是本地图片或远程URL
   */
  src: ImageMetadata | string;
  /**
   * 图片的替代文本
   */
  alt: string;
  /**
   * 图片的宽度
   */
  width?: number;
  /**
   * 图片的高度
   */
  height?: number;
  /**
   * 图片的加载方式
   * @default "lazy"
   */
  loading?: 'lazy' | 'eager';
  /**
   * 图片的填充方式
   * @default "cover"
   */
  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
  /**
   * 图片的位置
   * @default "center"
   */
  objectPosition?: string;
  /**
   * 是否显示加载中的占位图
   * @default true
   */
  showPlaceholder?: boolean;
  /**
   * 是否显示加载失败的错误图
   * @default true
   */
  showError?: boolean;
  /**
   * 自定义类名
   */
  class?: string;
  /**
   * 是否启用图片懒加载
   * @default true
   */
  lazy?: boolean;
  /**
   * 图片的圆角大小
   * @default "none"
   */
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | 'full';
  /**
   * 图片的阴影效果
   * @default "none"
   */
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
  /**
   * 图片的悬停效果
   * @default "none"
   */
  hover?: 'none' | 'scale' | 'brightness' | 'blur';
  /**
   * 图片的过渡动画
   * @default "none"
   */
  transition?: 'none' | 'fade' | 'slide' | 'zoom';

  /**
   * 加载指示器类型
   * @default "pulse"
   */
  loadingIndicator?: 'pulse' | 'spinner' | 'progress' | 'skeleton';
}

const {
  src,
  alt,
  width,
  height,
  loading = 'lazy',
  objectFit = 'cover',
  objectPosition = 'center',
  showPlaceholder = true,
  showError = true,
  class: className = '',
  lazy = true,
  rounded = 'none',
  shadow = 'none',
  hover = 'none',
  transition = 'none',
  loadingIndicator = 'skeleton',
} = Astro.props;

// 处理圆角样式
const getRoundedClass = (rounded: string) => {
  switch (rounded) {
    case 'sm': return 'rounded-sm';
    case 'md': return 'rounded-md';
    case 'lg': return 'rounded-lg';
    case 'xl': return 'rounded-xl';
    case '2xl': return 'rounded-2xl';
    case '3xl': return 'rounded-3xl';
    case 'full': return 'rounded-full';
    default: return '';
  }
};

// 处理阴影样式
const getShadowClass = (shadow: string) => {
  switch (shadow) {
    case 'sm': return 'shadow-sm';
    case 'md': return 'shadow-md';
    case 'lg': return 'shadow-lg';
    case 'xl': return 'shadow-xl';
    case '2xl': return 'shadow-2xl';
    default: return '';
  }
};

// 处理悬停效果
const getHoverClass = (hover: string) => {
  switch (hover) {
    case 'scale': return 'hover-scale';
    case 'brightness': return 'hover-brightness';
    case 'blur': return 'hover-blur';
    default: return '';
  }
};

// 处理过渡动画
const getTransitionClass = (transition: string) => {
  switch (transition) {
    case 'fade': return 'transition-opacity';
    case 'slide': return 'transition-transform';
    case 'zoom': return 'transition-all';
    default: return '';
  }
};

// 处理类名
const containerClasses = [
  'image-container',
  getRoundedClass(rounded),
  getShadowClass(shadow),
  getHoverClass(hover),
  getTransitionClass(transition),
  className
].filter(Boolean).join(' ');

// 处理图片样式
const imageStyles = {
  objectFit,
  objectPosition,
};

// 判断是否为本地图片
const isLocalImage = typeof src !== 'string' && 'src' in src;
// 判断是否为远程图片
const isRemoteImage = typeof src === 'string' && (src.startsWith('http') || src.startsWith('//'));
// 获取图片源
const imgSrc = typeof src === 'string' ? src : src.src;

// 图片类名
const imgClasses = [
  'image',
  getRoundedClass(rounded),
].filter(Boolean).join(' ');

// 占位图类名
const placeholderClasses = [
  'placeholder',
  loadingIndicator === 'pulse' ? 'animate-pulse' : '',
  getRoundedClass(rounded)
].filter(Boolean).join(' ');

// 错误占位图类名
const errorClasses = [
  'error-placeholder',
  getRoundedClass(rounded)
].filter(Boolean).join(' ');
---

<div class={containerClasses}>
  <div class="image-wrapper">
    <img
      src={imgSrc}
      alt={alt}
      width={width}
      height={height}
      loading={loading}
      class={imgClasses}
      style={imageStyles}
      data-remote={isRemoteImage ? 'true' : 'false'}
    />

    {/* 加载占位图 */}
    {showPlaceholder && (
      <div class={placeholderClasses}>
        {/* 远程图片加载指示器 */}
        {isRemoteImage && loadingIndicator === 'spinner' && (
          <div class="loading-indicator spinner">
            <div class="spinner-icon"></div>
          </div>
        )}
        
        {isRemoteImage && loadingIndicator === 'progress' && (
          <div class="loading-indicator progress">
            <div class="progress-bar-container">
              <div class="progress-bar"></div>
            </div>
          </div>
        )}
        
        {isRemoteImage && loadingIndicator === 'skeleton' && (
          <div class="loading-indicator skeleton">
            <div class="skeleton-animation"></div>
          </div>
        )}
      </div>
    )}

    {/* 错误占位图 */}
    {showError && (
      <div class={errorClasses}>
        <AlertTriangle size="32px" color="currentColor" class="error-icon" />
      </div>
    )}
  </div>
</div>

<script is:inline lang="ts">
  /**
   * 处理图片加载状态
   * @param {Element} img - 图片元素
   */
  function handleImageLoad(img) {
    if (!(img instanceof HTMLImageElement)) return;
    
    // 移除加载占位图
    const placeholder = img.parentElement?.querySelector('.placeholder');
    if (placeholder) {
      placeholder.classList.add('fade-out');
      setTimeout(() => {
        placeholder.remove();
      }, 300);
    }

    // 添加加载完成动画
    img.classList.add('loaded');
  }

  /**
   * 处理图片加载错误
   * @param {Element} img - 图片元素
   */
  function handleImageError(img) {
    if (!(img instanceof HTMLImageElement)) return;
    
    // 移除加载占位图
    const placeholder = img.parentElement?.querySelector('.placeholder');
    if (placeholder) {
      placeholder.classList.add('fade-out');
      setTimeout(() => {
        placeholder.remove();
      }, 300);
    }

    // 显示错误占位图
    const errorPlaceholder = img.parentElement?.querySelector('.error-placeholder');
    if (errorPlaceholder) {
      errorPlaceholder.classList.remove('hidden');
    }
  }

  /**
   * 模拟远程图片加载进度
   * @param {HTMLImageElement} img - 图片元素
   */
  function simulateLoadingProgress(img) {
    if (!(img instanceof HTMLImageElement) || img.getAttribute('data-remote') !== 'true') return;
    
    const progressBar = img.parentElement?.querySelector('.progress-bar');
    if (!progressBar) return;
    
    let progress = 0;
    const interval = setInterval(() => {
      // 随机增加进度，模拟网络波动
      progress += Math.random() * 15;
      
      if (progress >= 100 || img.complete) {
        clearInterval(interval);
        progress = 100;
      }
      
      progressBar.style.width = `${Math.min(progress, 100)}%`;
    }, 200);
    
    // 图片加载完成时清除定时器
    img.addEventListener('load', () => {
      clearInterval(interval);
      progressBar.style.width = '100%';
    });
    
    img.addEventListener('error', () => {
      clearInterval(interval);
    });
  }

  // 初始化图片加载处理
  function initializeImageHandlers() {
    const images = document.querySelectorAll('.image');
    images.forEach(img => {
      if (img instanceof HTMLImageElement) {
        // 如果图片已经加载完成
        if (img.complete) {
          handleImageLoad(img);
        } else {
          // 添加加载事件监听
          img.addEventListener('load', () => handleImageLoad(img));
          img.addEventListener('error', () => handleImageError(img));
          
          // 对远程图片模拟加载进度
          if (img.getAttribute('data-remote') === 'true') {
            simulateLoadingProgress(img);
          }
        }
      }
    });
  }

  // 页面加载时初始化
  document.addEventListener('astro:page-load', initializeImageHandlers);
  // 初始加载时也初始化
  initializeImageHandlers();
</script>

<style>
  /* 容器样式 */
  .image-container {
    position: relative;
  }

  .image-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
  }

  /* 图片样式 */
  .image {
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .image.loaded {
    opacity: 1;
  }

  /* 占位图样式 */
  .placeholder {
    position: absolute;
    inset: 0;
    background-color: #e5e7eb; /* 对应 bg-base-200 */
    transition: opacity 0.3s ease;
  }

  .placeholder.fade-out {
    opacity: 0;
  }

  /* 错误占位图样式 */
  .error-placeholder {
    position: absolute;
    inset: 0;
    background-color: rgba(239, 68, 68, 0.1); /* 对应 bg-error/10 */
    display: flex;
    align-items: center;
    justify-content: center;
    display: none;
  }

  .error-icon {
    color: #ef4444; /* 对应 text-error */
  }

  /* 加载指示器样式 */
  .loading-indicator {
    position: absolute;
    inset: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* 脉冲动画 */
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  /* 旋转加载指示器 */
  .spinner-icon {
    width: 24px;
    height: 24px;
    border: 3px solid rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    border-top-color: #3b82f6; /* 对应 text-primary */
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* 进度条 */
  .progress-bar-container {
    width: 75%;
    height: 8px;
    background-color: #d1d5db; /* 对应 bg-base-300 */
    border-radius: 9999px;
    overflow: hidden;
  }

  .progress-bar {
    height: 100%;
    background-color: #3b82f6; /* 对应 bg-primary */
    border-radius: 9999px;
    width: 0%;
  }

  /* 骨架屏 */
  .skeleton-animation {
    height: 100%;
    width: 100%;
    background: linear-gradient(90deg, #e5e7eb 0%, #f3f4f6 50%, #e5e7eb 100%);
    background-size: 400% 100%;
    animation: skeleton-loading 1.5s ease-in-out infinite;
  }

  @keyframes skeleton-loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  /* 圆角样式 */
  .rounded-sm {
    border-radius: 0.125rem;
  }

  .rounded-md {
    border-radius: 0.375rem;
  }

  .rounded-lg {
    border-radius: 0.5rem;
  }

  .rounded-xl {
    border-radius: 0.75rem;
  }

  .rounded-2xl {
    border-radius: 1rem;
  }

  .rounded-3xl {
    border-radius: 1.5rem;
  }

  .rounded-full {
    border-radius: 9999px;
  }

  /* 阴影样式 */
  .shadow-sm {
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  }

  .shadow-md {
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .shadow-lg {
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }

  .shadow-xl {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }

  .shadow-2xl {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  /* 悬停效果 */
  .hover-scale:hover {
    transform: scale(1.05);
  }

  .hover-brightness:hover {
    filter: brightness(1.1);
  }

  .hover-blur:hover {
    filter: blur(4px);
  }

  /* 过渡动画 */
  .transition-opacity {
    transition-property: opacity;
    transition-duration: 0.3s;
  }

  .transition-transform {
    transition-property: transform;
    transition-duration: 0.3s;
  }

  .transition-all {
    transition-property: all;
    transition-duration: 0.3s;
  }
</style> 