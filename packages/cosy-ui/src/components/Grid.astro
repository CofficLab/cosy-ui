---
/**
 * Grid组件
 * 
 * 一个灵活的网格布局组件，支持响应式列数和间距
 * 
 * @example
 * ```astro
 * <Grid cols={3} gap="md">
 *   <div>第一列</div>
 *   <div>第二列</div>
 *   <div>第三列</div>
 * </Grid>
 * 
 * <Grid cols={{base: 1, md: 2, lg: 3}} gap="lg">
 *   <div>响应式网格</div>
 *   <div>在不同屏幕尺寸下</div>
 *   <div>显示不同的列数</div>
 * </Grid>
 * ```
 */

import type { HTMLAttributes } from 'astro/types';

type ResponsiveValue<T> = T | {
  base?: T;
  sm?: T;
  md?: T;
  lg?: T;
  xl?: T;
  '2xl'?: T;
};

interface Props extends HTMLAttributes<'div'> {
  /**
   * 网格列数，可以是固定值或响应式对象
   * @default 1
   */
  cols?: ResponsiveValue<number>;
  
  /**
   * 网格间距
   * @default "md"
   */
  gap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  
  /**
   * 行间距，默认与gap相同
   */
  rowGap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  
  /**
   * 列间距，默认与gap相同
   */
  colGap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  
  /**
   * 自定义类名
   */
  class?: string;
  
  /**
   * 类名列表
   */
  'class:list'?: any;
}

const {
  cols = 1,
  gap = 'md',
  rowGap,
  colGap,
  class: className = '',
  'class:list': classList,
  ...rest
} = Astro.props;

// 处理响应式列数
const getColsClasses = (cols: ResponsiveValue<number>) => {
  if (typeof cols === 'number') {
    return `grid-cols-${cols}`;
  }
  
  const breakpoints = {
    base: '',
    sm: 'sm:',
    md: 'md:',
    lg: 'lg:',
    xl: 'xl:',
    '2xl': '2xl:'
  };
  
  return Object.entries(cols)
    .map(([breakpoint, value]) => {
      if (breakpoint === 'base') {
        return `grid-cols-${value}`;
      }
      return `${breakpoints[breakpoint as keyof typeof breakpoints]}grid-cols-${value}`;
    })
    .join(' ');
};

// 间距映射
const gapClasses = {
  none: 'gap-0',
  xs: 'gap-2',
  sm: 'gap-4',
  md: 'gap-6',
  lg: 'gap-8',
  xl: 'gap-12'
};

// 行间距映射
const rowGapClasses = {
  none: 'row-gap-0',
  xs: 'row-gap-2',
  sm: 'row-gap-4',
  md: 'row-gap-6',
  lg: 'row-gap-8',
  xl: 'row-gap-12'
};

// 列间距映射
const colGapClasses = {
  none: 'col-gap-0',
  xs: 'col-gap-2',
  sm: 'col-gap-4',
  md: 'col-gap-6',
  lg: 'col-gap-8',
  xl: 'col-gap-12'
};

// 构建最终类名
const gridClasses = [
  'grid',
  getColsClasses(cols),
  rowGap ? rowGapClasses[rowGap] : colGap ? gapClasses[gap] : gapClasses[gap],
  colGap ? colGapClasses[colGap] : null,
  className
].filter(Boolean).join(' ');
---

<div class:list={[gridClasses, classList]} {...rest}>
  <slot />
</div>

<style>
  /* 网格列数辅助类 */
  .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
  .grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
  .grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
  .grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
  .grid-cols-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }
  .grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
  .grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }
  
  /* 响应式断点 */
  @media (min-width: 640px) {
    .sm\:grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .sm\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
    .sm\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
    .sm\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
    .sm\:grid-cols-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }
    .sm\:grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
    .sm\:grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }
  }
  
  @media (min-width: 768px) {
    .md\:grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .md\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
    .md\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
    .md\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
    .md\:grid-cols-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }
    .md\:grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
    .md\:grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }
  }
  
  @media (min-width: 1024px) {
    .lg\:grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .lg\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
    .lg\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
    .lg\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
    .lg\:grid-cols-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }
    .lg\:grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
    .lg\:grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }
  }
  
  @media (min-width: 1280px) {
    .xl\:grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .xl\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
    .xl\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
    .xl\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
    .xl\:grid-cols-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }
    .xl\:grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
    .xl\:grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }
  }
  
  @media (min-width: 1536px) {
    .\32xl\:grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    .\32xl\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
    .\32xl\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
    .\32xl\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
    .\32xl\:grid-cols-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }
    .\32xl\:grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
    .\32xl\:grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }
  }
</style> 
