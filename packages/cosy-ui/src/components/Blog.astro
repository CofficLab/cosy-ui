---
interface Props {
  title: string;
  subtitle?: string;
  author?: string;
  date?: Date;
  cover?: {
    src: string;
    alt?: string;
  };
  tags?: string[];
}

const {
  title,
  subtitle,
  author,
  date,
  cover,
  tags = [],
} = Astro.props;

// 格式化日期
const formatDate = (date?: Date) => {
  if (!date) return '';
  return new Intl.DateTimeFormat('zh-CN', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
};
---

<article class="article">
  {/* 文章头部 */}
  <header class="mb-8">
    {cover && (
      <div class="relative w-full h-[300px] md:h-[400px] mb-6 rounded-lg overflow-hidden">
        <img
          src={cover.src}
          alt={cover.alt || title}
          class="w-full h-full object-cover"
        />
      </div>
    )}
    
    <div class="space-y-4">
      <h1 class="text-4xl md:text-5xl font-bold tracking-tight">{title}</h1>
      {subtitle && (
        <p class="text-xl text-base-content/70">{subtitle}</p>
      )}
      
      <div class="flex flex-wrap items-center gap-4 text-sm text-base-content/60">
        {author && (
          <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
            </svg>
            <span>{author}</span>
          </div>
        )}
        
        {date && (
          <div class="flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
              <line x1="16" y1="2" x2="16" y2="6"></line>
              <line x1="8" y1="2" x2="8" y2="6"></line>
              <line x1="3" y1="10" x2="21" y2="10"></line>
            </svg>
            <time datetime={date.toISOString()}>{formatDate(date)}</time>
          </div>
        )}
      </div>

      {tags.length > 0 && (
        <div class="flex flex-wrap gap-2">
          {tags.map(tag => (
            <span class="badge badge-outline">{tag}</span>
          ))}
        </div>
      )}
    </div>
  </header>

  {/* 文章内容 */}
  <div class="prose prose-lg max-w-none">
    <slot />
  </div>
</article>

<style>
  /* 自定义文章样式 */
  .article {
    container-type: inline-size;
  }

  /* 优化大屏幕阅读体验 */
  @container (min-width: 768px) {
    .article {
      font-size: 1.125rem;
      line-height: 1.75;
    }
  }

  /* 暗色主题适配 */
  :global([data-theme="dark"]) .article {
    --tw-prose-body: hsl(var(--bc));
    --tw-prose-headings: hsl(var(--bc));
    --tw-prose-links: hsl(var(--p));
    --tw-prose-bold: hsl(var(--bc));
    --tw-prose-quotes: hsl(var(--bc));
    --tw-prose-code: hsl(var(--bc));
  }
</style> 