---
/**
 * AppLayout组件
 *
 * 适用于页面布局，包含侧边栏导航和目录
 *
 * 布局效果：
 *
 * 移动端：
 * ```
 * +------------------+
 * |     Header      |
 * +------------------+
 * | Sidebar (1 line) |
 * +------------------+
 * |                  |
 * |   Main Content   |
 * |                  |
 * |                  |
 * +------------------+
 * |     Footer      |
 * +------------------+
 * ```
 *
 * 桌面端：
 * ```
 * +------------------+
 * |      Header     |
 * +--------+---------+
 * |        |         |
 * |Sidebar | Content |
 * |        |         |
 * |        |         |
 * +--------+---------+
 * |      Footer     |
 * +------------------+
 * ```
 *
 * @example
 * ```astro
 * ---
 * import AppLayout from '../layouts/AppLayout.astro';
 *
 * const sidebarItems = [
 *   { title: "入门", items: [
 *     { href: "/docs/getting-started", text: "快速开始" },
 *     { href: "/docs/installation", text: "安装" }
 *   ]},
 *   { title: "组件", items: [
 *     { href: "/docs/components/button", text: "Button 按钮" },
 *     { href: "/docs/components/card", text: "Card 卡片" }
 *   ]}
 * ];
 * ---
 *
 * <AppLayout
 *   title="文档标题"
 *   description="文档描述"
 *   sidebarItems={sidebarItems}
 * >
 *   <h1>文档内容</h1>
 *   <p>这是文档的主要内容</p>
 * </AppLayout>
 * ```
 *
 * 自定义页脚示例：
 * ```astro
 * <AppLayout
 *   title="文档标题"
 *   description="文档描述"
 *   sidebarItems={sidebarItems}
 *   footerSlogan="简单而强大的组件库"
 *   footerInspirationalSlogan="让开发更加愉悦"
 *   footerSocialLinks={[
 *     "https://github.com/myorg/myrepo",
 *     "https://twitter.com/myorg"
 *   ]}
 *   footerProducts={[
 *     { name: "组件库", href: "/components" },
 *     { name: "模板", href: "/templates" }
 *   ]}
 * >
 *   <h1>文档内容</h1>
 *   <p>这是文档的主要内容</p>
 * </AppLayout>
 * ```
 *
 * 组件支持多种页脚相关的配置参数，可以通过以 `footer` 为前缀的属性来自定义页脚的内容和链接。
 * 所有这些参数都是可选的，组件会为常用参数提供默认值。
 *
 * 全宽内容区域示例：
 * ```astro
 * <AppLayout
 *   title="文档标题"
 *   description="文档描述"
 *   sidebarItems={sidebarItems}
 *   contentFullWidth={true}
 * >
 *   <!-- 全宽Hero部分，无需容器限制 -->
 *   <div class="cosy:bg-primary cosy:p-10 cosy:text-white cosy:text-center">
 *     <h1 class="cosy:text-3xl">全宽Hero部分</h1>
 *     <p class="cosy:mt-4">没有容器限制，宽度可以100%占满</p>
 *   </div>
 *
 *   <!-- 自定义容器部分 -->
 *   <div class="cosy:mx-auto cosy:p-6 cosy:container">
 *     <p>在全宽模式下，您可以自行控制内容的容器和间距</p>
 *     <p>这使得创建全宽背景的同时，保持内容在合适的宽度内</p>
 *   </div>
 *
 *   <!-- 另一个全宽部分 -->
 *   <div class="cosy:bg-accent cosy:mt-8 cosy:p-10">
 *     <div class="cosy:mx-auto cosy:container">
 *       <h2 class="cosy:text-2xl">灵活的布局</h2>
 *       <p>您可以自由组合全宽区域和容器限制区域</p>
 *     </div>
 *   </div>
 * </AppLayout>
 * ```
 *
 * 调试模式示例：
 * ```astro
 * <AppLayout
 *   title="文档标题"
 *   description="文档描述"
 *   sidebarItems={sidebarItems}
 *   debug={true}
 * >
 *   <h1>文档内容</h1>
 *   <p>这是文档的主要内容</p>
 * </AppLayout>
 * ```
 */

import '../../app.css';
import BaseLayout from './BaseLayout.astro';
import Footer from './Footer.astro';
import Main from '../containers/Main.astro';
import Header from './Header.astro';
import Sidebar from './Sidebar.astro';
import type { AppLayoutProps } from '@/types/layout';

interface Props extends AppLayoutProps {}

const {
	sidebarConfig,
	showHeader = true,
	showFooter = true,
	showSidebar = true,
	class: className,
	'class:list': classList,
	debug = true,
	currentLocale,
	mainContentConfig,
	footerConfig,
	headerConfig,
	metaConfig,
	...rest
}: Props = Astro.props;

// 获取当前路径，并处理基础路径
const currentPath = Astro.url.pathname;

// 根据header高度设置侧边栏top值
const sidebarTopClasses = {
	'3xs': 'cosy:top-4',
	'2xs': 'cosy:top-6',
	xs: 'cosy:top-8',
	sm: 'cosy:top-10',
	md: 'cosy:top-12',
	lg: 'cosy:top-16',
	xl: 'cosy:top-20',
};
const sidebarTopClass = sidebarTopClasses[headerConfig.height || 'md'];
---

<BaseLayout
	title={metaConfig.title}
	description={metaConfig.description}
	keywords={metaConfig.keywords}
	author={metaConfig.author}
	robots={metaConfig.robots}
	head={metaConfig.head}
	class:list={[
		'cosy:min-h-screen cosy:flex cosy:flex-col',
		{ 'cosy:border cosy:border-base-300': debug },
	]}
	{...rest}>
	{
		showHeader && (
			<Header
				logo={headerConfig.logo}
				logoHref={headerConfig.logoHref}
				navItems={headerConfig.navItems}
				languages={headerConfig.languages}
				currentLocale={headerConfig.currentLocale}
				sticky={headerConfig.sticky}
				basePath={headerConfig.basePath}
				showSidebarToggle={headerConfig.showSidebarToggle}
				defaultSidebarOpen={headerConfig.defaultSidebarOpen}
				height={headerConfig.height}
				transition:persist
			/>
		)
	}

	<div class="cosy:flex cosy:flex-row cosy:flex-1 cosy:pb-0 cosy:min-h-screen">
		<!-- 侧边栏容器 -->
		{
			showSidebar && (
				<div class={`${sidebarTopClass} cosy:z-10 cosy:sticky cosy:bg-base-100 cosy:h-screen`}>
					<Sidebar
						sidebarItems={sidebarConfig.sidebarItems}
						currentPath={currentPath}
						debug={sidebarConfig.debug}
						class="cosy:lg:border-r cosy:border-b cosy:border-base-300 cosy:lg:border-b-0 cosy:lg:w-64 cosy:lg:shrink-0"
					/>
				</div>
			)
		}

		<!-- 主内容区域 -->
		<Main {...mainContentConfig}>
			<slot />
		</Main>
	</div>

	<!-- Footer -->
	{showFooter && <Footer {...footerConfig} />}

	<script>
		// Handle sidebar toggle
		const sidebarToggle = document.getElementById('sidebar-toggle');
		const sidebar = document.getElementById('sidebar-mobile');
		const sidebarOverlay = document.getElementById('sidebar-overlay');

		function toggleSidebar() {
			sidebar?.classList.toggle('cosy:hidden');
			sidebarOverlay?.classList.toggle('cosy:hidden');
			document.body.classList.toggle('cosy:overflow-hidden');
		}

		sidebarToggle?.addEventListener('click', toggleSidebar);
		sidebarOverlay?.addEventListener('click', toggleSidebar);
	</script>
</BaseLayout>
