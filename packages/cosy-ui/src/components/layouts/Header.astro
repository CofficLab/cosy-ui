---
import Link from '../base/Link.astro';
import Image from '../base/Image.astro';
import '../../app.css';

// 自定义图片元数据接口
interface ImageMetadata {
	src: string;
	width: number;
	height: number;
	format: string;
}

interface Props {
	logo: ImageMetadata;
	/**
	 * Logo 链接地址
	 * @default "/"
	 */
	logoHref?: string;
	languages?: Array<{ code: string; name: string }>;
	currentLocale?: string;
	navItems?: Array<{
		href: string;
		label: string;
		match: (path: string) => boolean;
	}>;
	socialLinks?: Array<{
		name: string;
		url: string;
		icon: any;
	}>;
	/**
	 * 是否固定在顶部
	 * @default true
	 */
	sticky?: boolean;
	/**
	 * 基础路径，用于处理网站部署在二级目录的情况
	 * @default ""
	 */
	basePath?: string;
	/**
	 * 是否显示侧边栏切换按钮
	 * @default false
	 */
	showSidebarToggle?: boolean;
	/**
	 * 侧边栏是否默认展开
	 * @default false
	 */
	defaultSidebarOpen?: boolean;
}

const {
	logo,
	logoHref = "/",
	navItems = [],
	sticky = true,
	languages = [
		{ code: 'zh-cn', name: '中文' },
		{ code: 'en', name: 'English' }
	],
	currentLocale = 'zh-cn',
	basePath = '',
} = Astro.props;

type NavItem = { href: string; label: string; match: (path: string) => boolean };

// 获取当前路径
const currentPath = Astro.url.pathname;

// 处理基础路径
const basePathPattern = basePath ? new RegExp(`^${basePath}`) : null;
const pathWithoutBase = basePathPattern ? currentPath.replace(basePathPattern, '') : currentPath;

// 提取路径部分，排除语言代码
const pathWithoutLocale = pathWithoutBase.replace(/^\/(zh-cn|en)/, '');

// 生成语言切换链接
function getLanguageUrl(langCode: string) {
	// 如果有基础路径，需要加上
	return `${basePath}/${langCode}${pathWithoutLocale}`;
}
---

<header class:list={[
	"cosy:navbar cosy:bg-accent/70 cosy:backdrop-blur cosy:border-base-200 cosy:z-50 cosy:w-full",
	{ "cosy:fixed cosy:top-0": sticky }
]}>
	<div class="cosy:navbar-start">
		<Link href={logoHref} class="cosy:btn cosy:btn-ghost">
			<Image src={logo} alt="logo" class="cosy:w-10 cosy:h-10" />
		</Link>
	</div>

	<!-- 导航 -->
	<div class="cosy:hidden cosy:lg:flex cosy:navbar-center">
		<ul class="cosy:px-1 cosy:menu cosy:menu-horizontal">
			{navItems.map((item: NavItem) => (
				<li>
					<Link href={item.href}>
						{item.label}
					</Link>
				</li>
			))}
		</ul>
	</div>

	<div class="cosy:navbar-end">
		<!-- 语言切换按钮 -->
		<div class="cosy:dropdown cosy:dropdown-end">
			<div tabindex="0" role="button" class="cosy:btn cosy:btn-ghost cosy:btn-sm">
				<span class="cosy:mr-1">{currentLocale === 'zh-cn' ? '中文' : 'English'}</span>
				<svg xmlns="http://www.w3.org/2000/svg" class="cosy:w-4 cosy:h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
				</svg>
			</div>
			<ul tabindex="0" class="cosy:z-[1] cosy:bg-base-100 cosy:shadow cosy:p-2 cosy:rounded-box cosy:w-32 cosy:dropdown-content cosy:menu">
				{languages.map((lang) => (
					<li class={currentLocale === lang.code ? "cosy:disabled" : ""}>
						<a href={getLanguageUrl(lang.code)} class={currentLocale === lang.code ? "cosy:active" : ""}>
							{lang.name}
						</a>
					</li>
				))}
			</ul>
		</div>
	</div>
</header>

{sticky && (
	<div class="cosy:h-16"></div>
)}

<script define:vars={{ sticky }}>
	if (sticky) {
		const header = document.querySelector('header');
		window.addEventListener('scroll', () => {
			if (window.pageYOffset > 0) {
				header?.classList.add('cosy:shadow-lg');
			} else {
				header?.classList.remove('cosy:shadow-lg');
			}
		});
	}
</script>