---
/**
 * @component Header
 *
 * @description
 * Header 组件是一个用于网站顶部导航的布局组件，提供了logo、导航菜单、语言切换等功能。
 * 组件支持响应式设计，在不同屏幕尺寸下有良好的显示效果，并可选择固定在页面顶部。
 *
 * @design
 * 设计理念：
 * 1. 简洁实用 - 提供清晰的导航和品牌展示，不过度占用视觉空间
 * 2. 响应式适配 - 在移动端和桌面端都有合适的展现形式
 * 3. 可定制性 - 支持多种配置选项，适应不同网站的风格和需求
 * 4. 多语言支持 - 内置语言切换功能，便于构建国际化网站
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Header
 *   logo={import("../assets/logo.png")}
 *   logoHref="/"
 *   navItems={[
 *     { href: "/docs", label: "文档", match: (path) => path.startsWith("/docs") },
 *     { href: "/components", label: "组件", match: (path) => path.startsWith("/components") }
 *   ]}
 * />
 * ```
 *
 * 自定义语言选项：
 * ```astro
 * <Header
 *   logo={import("../assets/logo.png")}
 *   languages={[
 *     { code: "zh-cn", name: "简体中文" },
 *     { code: "en", name: "English" },
 *     { code: "ja", name: "日本語" }
 *   ]}
 *   currentLocale="zh-cn"
 * />
 * ```
 *
 * 带有基础路径：
 * ```astro
 * <Header
 *   logo={import("../assets/logo.png")}
 *   basePath="/my-site"
 * />
 * ```
 *
 * 自定义高度：
 * ```astro
 * <Header
 *   logo={import("../assets/logo.png")}
 *   height="lg"
 * />
 */
import '../../app.css';
import Link from '../base/Link.astro';
import Image from '../base/Image.astro';
import type { HeaderProps } from '@/types/header';

interface Props extends HeaderProps {}

const {
	basePath = '',
	currentLocale = 'zh-cn',
	height = 'md',
	languages = [
		{ code: 'zh-cn', name: '中文' },
		{ code: 'en', name: 'English' },
	],
	logo,
	logoHref = '/',
	navItems = [],
	sticky = true,
} = Astro.props;

type NavItem = { href: string; label: string; match: (path: string) => boolean };

// 获取当前路径
const currentPath = Astro.url.pathname;

// 处理基础路径
const basePathPattern = basePath ? new RegExp(`^${basePath}`) : null;
const pathWithoutBase = basePathPattern ? currentPath.replace(basePathPattern, '') : currentPath;

// 提取路径部分，排除语言代码
const pathWithoutLocale = pathWithoutBase.replace(/^\/(zh-cn|en)/, '');

// 生成语言切换链接
function getLanguageUrl(langCode: string) {
	// 如果有基础路径，需要加上
	return `${basePath}/${langCode}${pathWithoutLocale}`;
}

// 获取初始高度（优先使用localStorage中的值）
type HeightType = '3xs' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';

let initialHeight: HeightType;
if (typeof window !== 'undefined') {
	const storedHeight = localStorage.getItem('cosy-header-height');
	initialHeight = (storedHeight as HeightType) || height;
} else {
	initialHeight = height;
}

// 根据高度设置样式
const headerHeightClasses = {
	'3xs': 'cosy:h-4',
	'2xs': 'cosy:h-6',
	xs: 'cosy:h-8',
	sm: 'cosy:h-10',
	md: 'cosy:h-12',
	lg: 'cosy:h-16',
	xl: 'cosy:h-20',
};

const headerHeightClass = headerHeightClasses[initialHeight];

// 设置logo大小
const logoSizeClasses = {
	'3xs': 'cosy:w-3 cosy:h-3',
	'2xs': 'cosy:w-4 cosy:h-4',
	xs: 'cosy:w-5 cosy:h-5',
	sm: 'cosy:w-6 cosy:h-6',
	md: 'cosy:w-8 cosy:h-8',
	lg: 'cosy:w-10 cosy:h-10',
	xl: 'cosy:w-12 cosy:h-12',
};

const logoSizeClass = logoSizeClasses[initialHeight];
---

<header
	class:list={[
		'cosy:navbar cosy:bg-accent/70 cosy:backdrop-blur cosy:border-base-200 cosy:z-50 cosy:w-full cosy:m-0 cosy:p-0 cosy:min-h-1',
		headerHeightClass,
		{ 'cosy:fixed cosy:top-0': sticky },
	]}>
	<div class="cosy:navbar-start">
		<Link
			href={logoHref}
			class:list={[
				'cosy:btn cosy:btn-ghost',
				initialHeight === 'xs' || initialHeight === '2xs' || initialHeight === '3xs'
					? 'cosy:btn-xs cosy:h-auto cosy:min-h-0 cosy:p-1'
					: initialHeight === 'sm'
						? 'cosy:btn-sm'
						: '',
			]}>
			<Image transition="none" src={logo} alt="logo" class={logoSizeClass} />
		</Link>
	</div>

	<!-- 导航 -->
	<div class="cosy:hidden cosy:lg:flex cosy:navbar-center">
		<ul
			class:list={[
				'cosy:px-1 cosy:menu cosy:menu-horizontal',
				initialHeight === 'xs' || initialHeight === '2xs' || initialHeight === '3xs'
					? 'cosy:menu-xs'
					: initialHeight === 'sm'
						? 'cosy:menu-sm'
						: '',
			]}>
			{
				navItems.map((item: NavItem) => (
					<li>
						<Link
							href={item.href}
							class:list={[
								initialHeight === 'xs' || initialHeight === '2xs' || initialHeight === '3xs'
									? 'cosy:py-0 cosy:px-2 cosy:min-h-0'
									: initialHeight === 'sm'
										? 'cosy:py-1 cosy:min-h-6'
										: '',
							]}>
							{item.label}
						</Link>
					</li>
				))
			}
		</ul>
	</div>

	<div class="cosy:navbar-end">
		<!-- 语言切换按钮 -->
		<div class="cosy:dropdown cosy:dropdown-end">
			<div
				tabindex="0"
				role="button"
				class:list={[
					'cosy:btn cosy:btn-ghost',
					initialHeight === 'xs' || initialHeight === '2xs' || initialHeight === '3xs'
						? 'cosy:btn-xs cosy:h-auto cosy:min-h-0 cosy:p-1'
						: initialHeight === 'sm'
							? 'cosy:btn-sm'
							: 'cosy:btn-sm',
				]}>
				<span class="cosy:mr-1">{currentLocale === 'zh-cn' ? '中文' : 'English'}</span>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="cosy:w-4 cosy:h-4"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"
					></path>
				</svg>
			</div>
			<ul
				tabindex="0"
				class="cosy:z-[1] cosy:bg-base-100 cosy:shadow cosy:p-2 cosy:rounded-box cosy:w-32 cosy:dropdown-content cosy:menu">
				{
					languages.map((lang) => (
						<li class={currentLocale === lang.code ? 'cosy:disabled' : ''}>
							<a
								href={getLanguageUrl(lang.code)}
								class={currentLocale === lang.code ? 'cosy:active' : ''}>
								{lang.name}
							</a>
						</li>
					))
				}
			</ul>
		</div>
	</div>
</header>
