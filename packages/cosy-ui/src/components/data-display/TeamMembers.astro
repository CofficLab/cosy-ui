---
/**
 * @component TeamMembers
 * 
 * @description
 * TeamMembers 组件用于展示团队成员列表，以网格布局呈现多个 TeamMember 组件。
 * 支持响应式布局，可以根据屏幕大小自动调整列数。
 * 
 * @design
 * 设计理念：
 * 1. 一致性展示 - 以统一的卡片形式展示团队成员信息
 * 2. 响应式布局 - 在不同屏幕尺寸下自动调整列数
 * 3. 灵活配置 - 支持自定义列数和样式
 * 
 * @usage
 * 基本用法：
 * ```astro
 * <TeamMembers members={teamData} />
 * ```
 * 
 * 自定义列数：
 * ```astro
 * <TeamMembers members={teamData} columns={2} />
 * ```
 * 
 * 添加自定义类名：
 * ```astro
 * <TeamMembers members={teamData} class="mt-8" />
 * ```
 */

import TeamMember from './TeamMember.astro';

// 导入样式
import '../../styles/index.css';
import '../../styles/components/team-members.css';

// 自定义图片元数据接口
interface ImageMetadata {
  src: string;
  width: number;
  height: number;
  format: string;
}

interface SocialLink {
  platform: 'github' | 'twitter' | 'linkedin' | 'website' | 'email';
  url: string;
}

interface TeamMemberData {
  name: string;
  role: string;
  avatar: ImageMetadata | string;
  bio: string;
  socialLinks?: SocialLink[];
}

interface Props {
  /**
   * 团队成员数据数组
   */
  members: TeamMemberData[];
  /**
   * 网格列数
   * @default 3
   */
  columns?: 2 | 3 | 4;
  /**
   * 自定义类名
   */
  class?: string;
}

const { 
  members,
  columns = 3,
  class: className = ''
} = Astro.props;

// 使用类型断言确保 columns 是有效的键
const columnsValue = columns as 2 | 3 | 4;

// 根据列数生成对应的类名
const getGridClasses = (cols: 2 | 3 | 4) => {
  const baseClass = 'team-members-cols-1';
  const mdClass = 'team-members-cols-md-2';
  const lgClass = cols === 4 ? 'team-members-cols-lg-4' : 'team-members-cols-lg-3';
  
  return [baseClass, mdClass, lgClass];
};
---

<div class:list={["team-members-container", className]}>
  <div class:list={["team-members-grid", ...getGridClasses(columnsValue)]}>
    {members.map((member: TeamMemberData, index: number) => (
      <div class="team-members-animate">
        <TeamMember {...member} />
      </div>
    ))}
  </div>
</div> 