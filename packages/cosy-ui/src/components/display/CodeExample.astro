---
/**
 * @component CodeExample
 * 
 * @description
 * 用于展示组件示例及其源代码的组件。
 * 采用标签形式，默认显示预览，用户可以点击标签切换到源代码视图。
 * 支持亮色和暗黑模式，会根据系统设置自动切换主题。
 * 
 * @usage
 * ```astro
 * <CodeExample 
 *   title="示例标题" 
 *   description="示例描述"
 *   code={`<Alert type="info">这是一个示例</Alert>`}
 * >
 *   <Alert type="info">这是一个示例</Alert>
 * </CodeExample>
 * ```
 * 
 * @props
 * @prop {string} [title] - 示例标题
 * @prop {string} [description] - 示例描述
 * @prop {string} code - 要展示的源代码
 * 
 * @slots
 * @slot default - 组件的实际渲染内容
 */

// 导入图标
import { ClipboardIcon, CheckIcon } from '../../index'
import "../../app.css"

interface Props {
  title?: string;
  description?: string;
  code: string;
}

const { title, description, code } = Astro.props;
---

<div class="cosy:card cosy:bg-base-100 cosy:shadow-lg cosy:mb-8 cosy:rounded-none code-example">
  {title && <h3 class="cosy:card-title cosy:p-4 cosy:border-b cosy:border-base-300">{title}</h3>}
  {description && <p class="cosy:px-4 cosy:pt-4 cosy:text-base-content/70">{description}</p>}
  
  <div class="cosy:flex cosy:justify-between cosy:items-center cosy:px-4 cosy:bg-base-200 cosy:rounded-none">
    <div role="tablist" class="cosy:tabs cosy:tabs-box">
      <button role="tab" class="cosy:tab cosy:tab-active" data-tab="preview">预览</button>
      <button role="tab" class="cosy:tab" data-tab="code">代码</button>
    </div>
    <div class="cosy:flex cosy:items-center cosy:gap-2">
      <button class="cosy:btn cosy:btn-ghost cosy:btn-sm cosy:gap-2" aria-label="复制代码">
        <span class="copy-icon"><ClipboardIcon /></span>
        <span class="check-icon cosy:hidden cosy:text-success"><CheckIcon /></span>
        <span class="copy-text">复制代码</span>
      </button>
    </div>
  </div>
  
  <div class="cosy:relative cosy:p-0">
    <div class="code-example-panel active" data-panel="preview">
      <div class="cosy:p-6 cosy:bg-base-100">
        <slot />
      </div>
    </div>
    
    <div class="code-example-panel" data-panel="code">
      <div class="cosy:bg-base-300 cosy:px-6 cosy:py-2">
        <pre class="cosy:overflow-x-auto"><code class="language-astro">{code}</code></pre>
      </div>
    </div>
  </div>
</div>

<style>
  .code-example-panel {
    display: none;
  }
  
  .code-example-panel.active {
    display: block;
  }
</style>

<script>
  function initializeCodeExample() {
    // 标签切换功能
    const tabs = document.querySelectorAll('.cosy\\:tab');
    
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        // 获取当前标签组
        const tabGroup = tab.closest('.cosy\\:tabs');
        if (!tabGroup) return;
        
        const codeExample = tab.closest('.cosy\\:card');
        if (!codeExample) return;
        
        const contentContainer = codeExample.querySelector('.cosy\\:relative');
        if (!contentContainer) return;
        
        // 获取目标面板
        const targetTab = tab.getAttribute('data-tab');
        if (!targetTab) return;
        
        // 更新标签状态
        tabGroup.querySelectorAll('.cosy\\:tab').forEach(t => {
          t.classList.remove('cosy:tab-active');
        });
        tab.classList.add('cosy:tab-active');
        
        // 更新面板状态
        contentContainer.querySelectorAll('.code-example-panel').forEach(panel => {
          panel.classList.remove('active');
        });
        
        const targetPanel = contentContainer.querySelector(`[data-panel="${targetTab}"]`);
        if (targetPanel) {
          targetPanel.classList.add('active');
        }
      });
    });
    
    // 复制代码功能
    const copyButtons = document.querySelectorAll('.cosy\\:btn-ghost');
    
    copyButtons.forEach(button => {
      button.addEventListener('click', () => {
        const codeBlock = button.closest('.cosy\\:bg-base-300');
        if (!codeBlock) return;
        
        const codeElement = codeBlock.querySelector('code');
        if (!codeElement) return;
        
        const code = codeElement.textContent || '';
        
        // 复制到剪贴板
        navigator.clipboard.writeText(code).then(() => {
          // 显示复制成功状态
          button.classList.add('cosy:btn-success');
          button.querySelector('.copy-icon')?.classList.add('cosy:hidden');
          button.querySelector('.check-icon')?.classList.remove('cosy:hidden');
          button.querySelector('.copy-text')?.classList.add('cosy:text-success');
          
          // 3秒后恢复原状
          setTimeout(() => {
            button.classList.remove('cosy:btn-success');
            button.querySelector('.copy-icon')?.classList.remove('cosy:hidden');
            button.querySelector('.check-icon')?.classList.add('cosy:hidden');
            button.querySelector('.copy-text')?.classList.remove('cosy:text-success');
          }, 3000);
        });
      });
    });
  }
  
  // 初始化
  initializeCodeExample();
  
  // Astro 页面切换时重新初始化
  document.addEventListener('astro:page-load', initializeCodeExample);
</script> 
