---
/**
 * @component CodeBlock
 * 
 * @description
 * CodeBlock 组件用于在页面中展示格式化的代码片段，支持语法高亮、行号显示和代码复制功能。
 * 组件设计简洁美观，提供良好的代码可读性和用户交互体验。
 * 
 * @design
 * 设计理念：
 * 1. 可读性优先 - 清晰的字体、合适的间距和语法高亮，确保代码易于阅读
 * 2. 功能完备 - 支持行号显示、代码复制等实用功能
 * 3. 视觉一致性 - 与整体设计系统保持一致的视觉风格
 * 4. 响应式设计 - 在不同屏幕尺寸下保持良好的可用性
 * 
 * 视觉特点：
 * - 语法高亮：使用北欧风格的配色方案，柔和且易于阅读
 * - 行号显示：可选的行号显示，帮助定位代码位置
 * - 标题栏：可选的标题栏，显示文件名或代码类型
 * - 复制按钮：便捷的代码复制功能，带有状态反馈
 * 
 * @usage
 * 基本用法：
 * ```astro
 * <CodeBlock code={`console.log('Hello, world!');`} lang="js" />
 * ```
 * 
 * 带标题和行号：
 * ```astro
 * <CodeBlock 
 *   code={`function greet(name) {\n  return 'Hello, ' + name + '!';\n}`}
 *   lang="js"
 *   title="greeting.js"
 *   showLineNumbers={true}
 * />
 * ```
 * 
 * @props
 * @prop {string} code - 要显示的代码字符串
 * @prop {string} [lang="plaintext"] - 代码语言，用于语法高亮
 * @prop {string} [title] - 代码块的标题，通常是文件名
 * @prop {boolean} [showLineNumbers=true] - 是否显示行号
 * 
 * @accessibility
 * - 使用语义化HTML结构
 * - 复制按钮提供清晰的视觉反馈
 * - 代码使用等宽字体，确保对齐和可读性
 */

// 导入样式
import '../../styles/index.css';
import '../../styles/components/code-block.css';

interface Props {
  code: string;
  lang?: string;
  title?: string;
  showLineNumbers?: boolean;
}

const {
  code,
  lang = 'plaintext',
  title,
  showLineNumbers = true,
} = Astro.props;

// 移除代码字符串开头和结尾的空行
const trimmedCode = code.trim();

// 生成行号
const lines = trimmedCode.split('\n');
const lineNumbers = Array.from({ length: lines.length }, (_, i) => i + 1);
---

<div class="code-block not-prose">
  {/* 标题栏 */}
  {title && (
    <div class="code-block-header">
      <span class="code-block-title">{title}</span>
      <button
        class="copy-button"
        data-code={trimmedCode}
        title="复制代码"
      >
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
          <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
        </svg>
        <span class="copy-text">复制</span>
      </button>
    </div>
  )}

  {/* 代码区域 */}
  <div class="code-content">
    {/* 行号 */}
    {showLineNumbers && (
      <div class="line-numbers">
        {lineNumbers.map(num => (
          <div class="line-number">{num}</div>
        ))}
      </div>
    )}

    {/* 代码内容 */}
    <pre class:list={["language-" + lang, { "with-line-numbers": showLineNumbers }]}>
      <code class={"language-" + lang} set:html={trimmedCode} />
    </pre>
  </div>
</div>

<script>
  function initializeCopyButtons() {
    const copyButtons = document.querySelectorAll('.copy-button');
    
    copyButtons.forEach(button => {
      button.addEventListener('click', async () => {
        const code = button.getAttribute('data-code') || '';
        const copyText = button.querySelector('.copy-text');
        
        try {
          await navigator.clipboard.writeText(code);
          if (copyText) {
            copyText.textContent = '已复制！';
            setTimeout(() => {
              copyText.textContent = '复制';
            }, 2000);
          }
        } catch (err) {
          console.error('复制失败:', err);
          if (copyText) {
            copyText.textContent = '复制失败';
            setTimeout(() => {
              copyText.textContent = '复制';
            }, 2000);
          }
        }
      });
    });
  }

  // 在页面加载时初始化
  initializeCopyButtons();

  // 在 Astro 页面切换时重新初始化
  document.addEventListener('astro:page-load', initializeCopyButtons);
</script> 