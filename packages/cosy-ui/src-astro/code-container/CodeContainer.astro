---
/**
 * @component CodeContainer
 *
 * @description
 * 用于展示代码示例的容器组件。使用时只需在默认slot中传入内容，
 * 并为每个示例设置对应的id (tab-1, tab-2等)
 *
 * @example
 * ```astro
 * <CodeContainer>
 *   <div id="tab-1">
 *     <Alert type="info">这是第一个示例</Alert>
 *   </div>
 *   <div id="tab-2">
 *     <Alert type="success">这是第二个示例</Alert>
 *   </div>
 * </CodeContainer>
 * ```
 */

import { ClipboardIcon, CheckIcon, InfoIcon } from '../../index-astro';
import '../../style.ts';

interface Props {
  /**
   * tab的标题，如果不提供则使用"示例 1"这样的默认标题
   */
  titles?: string[];
  /**
   * tab的描述文本
   */
  descriptions?: string[];
  /**
   * 每个示例对应的源代码
   */
  codes: string[];
}

const { titles = [], descriptions = [], codes } = Astro.props;
---

<div data-role="code-container" class="cosy:mb-8 cosy:card" ignore-heading>
  <!-- 工具栏 -->
  <div
    class="cosy:flex cosy:justify-between cosy:items-center cosy:bg-base-200 cosy:px-4 cosy:rounded-t">
    <!-- 标签 -->
    <div class="cosy:flex cosy:items-center cosy:gap-4">
      <div role="tablist" class="cosy:tabs cosy:tabs-box">
        {
          codes.map((_, index) => (
            <button
              role="tab"
              class={`cosy:tab ${index === 0 ? 'cosy:tab-active' : ''}`}
              data-tab={`tab-${index + 1}`}>
              {titles[index] || `示例 ${index + 1}`}
            </button>
          ))
        }
      </div>
    </div>

    <!-- 工具按钮 -->
    <div class="cosy:flex cosy:items-center cosy:gap-2">
      <button
        role="switch"
        class="cosy:btn cosy:btn-ghost cosy:btn-sm"
        aria-checked="false"
        aria-label="切换代码/预览"
        data-toggle="code">
        <span class="cosy:code-icon"><InfoIcon /></span>
      </button>
      <button
        class="cosy:gap-2 cosy:btn cosy:btn-ghost cosy:btn-sm"
        aria-label="复制代码">
        <span class="cosy:copy-icon"><ClipboardIcon /></span>
        <span class="cosy:hidden cosy:check-icon"><CheckIcon /></span>
      </button>
    </div>
  </div>

  {
    codes.map((code, index) => (
      <div
        class={`cosy:example-container ${index === 0 ? 'cosy:block' : 'cosy:hidden'}`}
        data-example={`tab-${index + 1}`}>
        {/* 描述 */}
        {descriptions[index] && (
          <p class="cosy:px-4 cosy:py-2 cosy:text-sm cosy:bg-gradient-to-b not-prose cosy:from-blue-100/50 cosy:to-blue-100/90 ">
            {descriptions[index]}
          </p>
        )}

        <div class="cosy:relative cosy:p-4 cosy:bg-gradient-to-br cosy:from-red-100 cosy:to-green-300 cosy:rounded-b">
          <div class="cosy:block cosy:code-example-panel" data-panel="preview">
            <slot />
          </div>

          <div class="cosy:hidden cosy:code-example-panel" data-panel="code">
            <pre class="cosy:overflow-x-auto" style="margin:0">
              <code class="cosy:language-astro">{code}</code>
            </pre>
          </div>
        </div>
      </div>
    ))
  }
</div>

<script>
  function initializeCodeContainer() {
    console.log('CodeContainer: 初始化代码容器');

    // 示例切换功能
    const exampleTabs = document.querySelectorAll(
      '[role="tab"][data-tab^="tab-"]'
    );
    exampleTabs.forEach((tab) => {
      tab.addEventListener('click', () => {
        console.log('CodeContainer: 切换示例', tab.getAttribute('data-tab'));
        const container = tab.closest('[data-role="code-container"]');
        if (!container) return;

        // 更新标签状态
        container
          .querySelectorAll('[role="tab"][data-tab^="tab-"]')
          .forEach((t) => {
            t.classList.remove('cosy:tab-active');
          });
        tab.classList.add('cosy:tab-active');

        // 获取当前标签对应的内容 id
        const targetId = tab.getAttribute('data-tab');
        if (!targetId) return;

        // 切换示例容器
        container
          .querySelectorAll('.cosy\\:example-container')
          .forEach((example) => {
            if (example.getAttribute('data-example') === targetId) {
              example.classList.remove('cosy:hidden');
              example.classList.add('cosy:block');
            } else {
              example.classList.add('cosy:hidden');
              example.classList.remove('cosy:block');
            }
          });

        // 更新对应内容的可见性
        const allContent = container.querySelectorAll('[id^="tab-"]');
        allContent.forEach((content) => {
          if (content.id === targetId) {
            content.classList.remove('cosy:hidden');
            content.classList.add('cosy:block');
          } else {
            content.classList.add('cosy:hidden');
            content.classList.remove('cosy:block');
          }
        });
      });
    });

    // 代码开关功能
    const codeToggles = document.querySelectorAll('[data-toggle="code"]');
    codeToggles.forEach((toggle) => {
      toggle.addEventListener('click', () => {
        console.log('code toggle clicked', toggle);
        const container = toggle.closest('[data-role="code-container"]');
        if (!container) {
          console.error('CodeContainer: 无法找到父容器');
          return;
        }

        // 切换开关状态
        const isChecked = toggle.getAttribute('aria-checked') === 'true';
        console.log('代码按钮 isChecked:', isChecked);
        toggle.setAttribute('aria-checked', !isChecked ? 'true' : 'false');
        toggle.classList.toggle('cosy:btn-primary', !isChecked);
        toggle.classList.toggle('cosy:btn-ghost', isChecked);

        // 找到当前显示的示例
        const activeExample = container.querySelector(
          '.cosy\\:example-container:not(.cosy\\:hidden)'
        );
        if (!activeExample) {
          console.error('CodeContainer: 无法找到活动示例');
          return;
        }

        // 切换面板
        activeExample
          .querySelectorAll('.cosy\\:code-example-panel')
          .forEach((panel) => {
            if (panel.getAttribute('data-panel') === 'code') {
              console.log(
                '处理代码面板的展示/隐藏，此时的isChecked:',
                isChecked
              );
              panel.classList.toggle('cosy:hidden', isChecked);
              panel.classList.toggle('cosy:block', !isChecked);
            } else {
              console.log(
                '处理预览面板的展示/隐藏，此时的isChecked:',
                isChecked
              );
              panel.classList.toggle('cosy:hidden', !isChecked);
              panel.classList.toggle('cosy:block', isChecked);
            }
          });
      });
    });

    // 复制代码功能
    const copyButtons = document.querySelectorAll('[aria-label="复制代码"]');
    copyButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const container = button.closest('[data-role="code-container"]');
        if (!container) return;

        // 确保代码面板是显示的
        const codeToggle = container.querySelector('[data-toggle="code"]');
        if (codeToggle?.getAttribute('aria-checked') !== 'true') {
          (codeToggle as HTMLElement)?.click();
        }

        // 找到当前显示的示例
        const activeExample = container.querySelector(
          '.cosy\\:example-container:not(.cosy\\:hidden)'
        );
        if (!activeExample) return;

        const codePanel = activeExample.querySelector('[data-panel="code"]');
        if (!codePanel) return;

        const codeElement = codePanel.querySelector('code');
        if (!codeElement) return;

        const code = codeElement.textContent || '';

        // 复制到剪贴板
        navigator.clipboard.writeText(code).then(() => {
          button.classList.add('cosy:btn-success');
          button
            .querySelector('.cosy\\:copy-icon')
            ?.classList.add('cosy:hidden');
          button
            .querySelector('.cosy\\:check-icon')
            ?.classList.remove('cosy:hidden');

          setTimeout(() => {
            button.classList.remove('cosy:btn-success');
            button
              .querySelector('.cosy\\:copy-icon')
              ?.classList.remove('cosy:hidden');
            button
              .querySelector('.cosy\\:check-icon')
              ?.classList.add('cosy:hidden');
          }, 3000);
        });
      });
    });

    // 初始化时隐藏除第一个以外的所有内容
    document
      .querySelectorAll('[data-role="code-container"]')
      .forEach((container) => {
        const contents = container.querySelectorAll('[id^="tab-"]');
        contents.forEach((content, index) => {
          if (index !== 0) {
            content.classList.add('cosy:hidden');
          }
        });
      });
  }

  document.addEventListener('astro:page-load', () => {
    console.log('CodeContainer: 页面加载完成，初始化代码容器');
    initializeCodeContainer();
  });
</script>
