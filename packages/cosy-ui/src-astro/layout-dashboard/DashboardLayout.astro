---
/**
 * @component DashboardLayout
 *
 * @description
 * DashboardLayout 组件适用于管理后台的布局，包含侧边栏导航和顶部导航栏。
 * 提供了完整的管理界面框架，包括响应式设计和暗色主题支持。
 *
 * @design
 * 设计理念：
 * 1. 清晰的信息层次 - 通过侧边栏和顶部导航提供明确的导航结构
 * 2. 响应式布局 - 在不同设备上提供良好的用户体验
 * 3. 可定制性 - 支持自定义导航项、系统名称和用户信息
 * 4. 状态保持 - 记住用户的侧边栏折叠状态
 *
 * @usage
 * ```astro
 * ---
 * import { DashboardLayout } from '@coffic/cosy-ui';
 *
 * const navItems = [
 *   { href: "/dashboard", text: "仪表盘" },                    // 自动匹配 dashboard 图标
 *   { href: "/dashboard/users", text: "用户管理" },             // 自动匹配 users 图标
 *   { href: "/dashboard/settings", text: "系统设置" },          // 自动匹配 settings 图标
 *   { href: "/dashboard/reports", icon: "chart", text: "报表" } // 手动指定图标
 * ];
 * ---
 *
 * <DashboardLayout
 *   title="管理后台"
 *   navItems={navItems}
 *   userName="管理员"
 *   sidebarSize="lg"
 * >
 *   <h1>仪表盘内容</h1>
 *   <p>这是仪表盘的主要内容</p>
 * </DashboardLayout>
 * ```
 *
 * @props
 * - title: string - 页面标题
 * - description?: string - 页面描述
 * - systemName?: string - 系统名称，默认为"管理系统"
 * - navItems: NavItem[] - 导航项目
 * - userName?: string - 用户名
 * - userAvatar?: string - 用户头像
 * - sidebarCollapsed?: boolean - 是否折叠侧边栏，默认为false
 * - sidebarSize?: 'sm' | 'md' | 'lg' | 'xl' - 侧边栏尺寸，默认为"md"
 * - sidebarTheme?: SidebarTheme - 侧边栏主题，默认为"default"
 * - contentTheme?: ContentTheme - 内容区域主题，默认为"card"
 * - head?: astroHTML.JSX.Element - 自定义头部内容
 * - class?: string - 页面类名
 * - class:list?: any - 类名列表
 * - debug?: boolean - 调试模式，默认为false
 *
 * @slots
 * - default - 主要内容区域
 */

import { BaseLayout } from '../../index-astro';
import DashboardSidebar from './DashboardSidebar.astro';
import DashboardTopNavbar from './DashboardTopNavbar.astro';
import '../../style.ts';
import {
  type NavItem,
  type SidebarSize,
  type SidebarTheme,
  type ContentTheme,
  getContentTheme,
} from './types';

export interface Props {
  /**
   * 页面标题
   */
  title: string;

  /**
   * 页面描述
   */
  description?: string;

  /**
   * 系统名称
   * @default "管理系统"
   */
  systemName?: string;

  /**
   * 导航项目
   */
  navItems: NavItem[];

  /**
   * 用户名
   */
  userName?: string;

  /**
   * 用户头像
   */
  userAvatar?: string;

  /**
   * 是否折叠侧边栏
   * @default false
   */
  sidebarCollapsed?: boolean;

  /**
   * 侧边栏尺寸
   * @default "md"
   */
  sidebarSize?: SidebarSize;

  /**
   * 侧边栏主题
   * @default "default"
   */
  sidebarTheme?: SidebarTheme;

  /**
   * 内容区域主题
   * @default "card"
   */
  contentTheme?: ContentTheme;

  /**
   * 自定义头部内容
   */
  head?: astroHTML.JSX.Element;

  /**
   * 页面类名
   */
  class?: string;

  /**
   * 类名列表
   */
  'class:list'?: any;

  /**
   * 调试模式
   * @default false
   */
  debug?: boolean;
}

const {
  title,
  description,
  systemName = '管理系统',
  navItems,
  userName,
  userAvatar,
  sidebarCollapsed = false,
  sidebarSize = 'md',
  sidebarTheme = 'default',
  contentTheme = 'card',
  head,
  class: className,
  'class:list': classList,
  debug = false,
  ...rest
} = Astro.props;

const currentPath = Astro.url.pathname;
const contentStyles = getContentTheme(contentTheme);
---

<BaseLayout
  title={title}
  description={description || ''}
  head={head}
  keywords=""
  author=""
  robots=""
  debug={debug}
  class:list={['cosy:min-h-screen cosy:bg-base-200', className, classList]}
  {...rest}>
  <div class:list={['cosy:drawer', { 'cosy:drawer-open': !sidebarCollapsed }]}>
    <input id="dashboard-drawer" type="checkbox" class="cosy:drawer-toggle" />

    <!-- 侧边栏 -->
    <div class="cosy:drawer-side">
      <label
        for="dashboard-drawer"
        aria-label="close sidebar"
        class="cosy:drawer-overlay"></label>
      <DashboardSidebar
        systemName={systemName}
        navItems={navItems}
        currentPath={currentPath}
        size={sidebarSize}
        theme={sidebarTheme}
      />
    </div>

    <!-- 主内容区 -->
    <div class="cosy:drawer-content cosy:flex cosy:flex-col">
      <!-- 顶部导航栏 -->
      <DashboardTopNavbar
        title={title}
        userName={userName}
        userAvatar={userAvatar}
      />

      <!-- 页面内容 -->
      <main class="cosy:flex-1 cosy:p-4 cosy:lg:p-6">
        {
          contentStyles.container ? (
            <div class={`${contentStyles.container} ${contentStyles.shadow}`}>
              <div class="cosy:card-body">
                <slot />
              </div>
            </div>
          ) : (
            <slot />
          )
        }
      </main>
    </div>
  </div>
</BaseLayout>

<script>
  // 从本地存储恢复状态
  document.addEventListener('DOMContentLoaded', () => {
    const drawerToggle = document.getElementById(
      'dashboard-drawer'
    ) as HTMLInputElement;

    if (drawerToggle) {
      const savedState = localStorage.getItem('sidebarCollapsed');
      if (savedState) {
        drawerToggle.checked = savedState === 'true';
      }
    }
  });
</script>
