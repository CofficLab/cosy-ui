---
/**
 * @component Alert
 *
 * @description
 * Alert 组件用于向用户显示重要的提示信息，支持多种类型的提示样式和交互效果。
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Alert type="info">这是一条信息提示</Alert>
 * ```
 *
 * 带标题：
 * ```astro
 * <Alert type="success" title="操作成功">您的操作已成功完成</Alert>
 * ```
 *
 * 组合使用：
 * ```astro
 * <Alert
 *   type="error"
 *   title="提交失败"
 *   class="my-custom-class"
 * >
 *   请检查表单并重新提交
 * </Alert>
 * ```
 *
 * @props
 * @prop {('info'|'success'|'warning'|'error')} [type='info'] - 提示类型，影响颜色和图标
 * @prop {string} [title] - 提示标题，可选
 * @prop {string} [class] - 自定义 CSS 类名
 * @prop {boolean} [closable=true] - 是否可关闭
 *
 * @slots
 * @slot default - 提示内容
 */

// 注意：
// 	1. 导入样式文件才能正确处理文件中使用的class
//  2. 所有的导入必须使用相对路径

import '../../style.ts';
import {
  InfoIcon,
  SuccessIcon,
  WarningIcon,
  ErrorIcon,
  CloseIcon,
} from '../../index-astro';

interface Props {
  type?: 'info' | 'success' | 'warning' | 'error';
  title?: string;
  class?: string;
  closable?: boolean;
}

const {
  type = 'info',
  title,
  class: className = '',
  closable = true,
} = Astro.props;

// 根据类型设置样式
const alertClass = {
  info: 'cosy:alert-info',
  success: 'cosy:alert-success',
  warning: 'cosy:alert-warning',
  error: 'cosy:alert-error',
}[type as 'info' | 'success' | 'warning' | 'error'];

// 根据类型设置图标组件
const IconComponent = {
  info: InfoIcon,
  success: SuccessIcon,
  warning: WarningIcon,
  error: ErrorIcon,
}[type as 'info' | 'success' | 'warning' | 'error'];
---

<div
  class={`cosy:alert cosy:w-full cosy:flex ${alertClass} ${className}`}
  role="alert">
  <div
    class="cosy:flex cosy:flex-row cosy:items-center cosy:gap-4 cosy:justify-between cosy:w-full">
    <IconComponent />

    <div
      class="cosy:flex cosy:flex-col cosy:items-start cosy:h-full cosy:flex-1">
      {
        title && (
          <h3 class="cosy:font-bold" style="margin-top: 0 !important">
            {title}
          </h3>
        )
      }
      {
        title && (
          <div class="cosy:text-xs">
            <slot />
          </div>
        )
      }

      {!title && <slot />}
    </div>
    {
      closable && (
        <button
          class="cosy:ml-auto cosy:btn cosy:btn-ghost cosy:btn-sm cosy:btn-circle"
          onclick="this.parentElement.parentElement.style.display = 'none';">
          <CloseIcon class="cosy:h-5 cosy:w-5" />
        </button>
      )
    }
  </div>
</div>
