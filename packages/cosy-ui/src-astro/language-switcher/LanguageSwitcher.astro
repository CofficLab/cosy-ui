---
/**
 * @component LanguageSwitcher
 *
 * @description
 * LanguageSwitcher 组件提供一个语言切换下拉菜单，支持多语言网站的语言切换功能。
 * 组件会自动处理 URL 路径，确保在切换语言时保留当前页面路径。
 *
 * @design
 * 设计理念：
 * 1. 简洁直观 - 清晰显示当前语言和可选语言
 * 2. 无缝集成 - 自动处理 URL 路由，保持用户浏览上下文
 * 3. 可定制性 - 支持自定义语言列表和当前语言设置
 * 4. 一致的视觉风格 - 使用与整体设计系统一致的下拉菜单样式
 *
 * @usage
 * 基本用法（需要用户传入 astro:i18n 模块）：
 * ```astro
 * ---
 * import * as astroI18n from 'astro:i18n';
 * ---
 * <LanguageSwitcher astroI18n={astroI18n} />
 * ```
 *
 * @props
 * - astroI18n - 完整的 astro:i18n 模块
 * - class - 自定义CSS类名
 */

import {
  ChevronDownIcon,
  LanguageUtil,
  Link,
  ListItem,
} from '../../index-astro';
import '../../style.ts';

interface Props {
  /**
   * 完整的 astro:i18n 模块
   */
  astroI18n?: any;

  /**
   * 自定义类名
   */
  class?: string;
}

const { astroI18n, class: className = '' } = Astro.props;

let links: any[] = [];
let currentLocale: string | undefined = undefined;
let currentLanguageName: string | undefined = undefined;
let shouldRender = false;

// 检查是否有当前语言和 astroI18n 模块
if (Astro.currentLocale && astroI18n) {
  currentLocale = Astro.currentLocale;
  currentLanguageName = LanguageUtil.getLanguageName(currentLocale);
  shouldRender = true;

  try {
    // 使用用户传入的 astroI18n 模块
    const { getRelativeLocaleUrl, getRelativeLocaleUrlList } = astroI18n;

    const getBaseUrl = (): string => {
      return import.meta.env.BASE_URL || '/';
    };

    const getLocaleFromUrl = (url: string): string => {
      return url.replace(getBaseUrl(), '').split('/')[0];
    };

    const currentLocalURLPrefix = getRelativeLocaleUrl(currentLocale, '');
    const pathname = Astro.url.pathname + '/';
    const slug = pathname.replace(currentLocalURLPrefix, '');
    const urls = getRelativeLocaleUrlList(slug);

    links = urls.map((url: string) => ({
      locale: getLocaleFromUrl(url),
      name: LanguageUtil.getLanguageName(getLocaleFromUrl(url)),
      url: url,
    }));
  } catch (error) {
    console.warn('LanguageSwitcher: Error generating switcher links:', error);
    shouldRender = false;
  }
} else {
  if (!Astro.currentLocale) {
    console.warn(
      'LanguageSwitcher: i18n is not enabled in the current project'
    );
  } else if (!astroI18n) {
    console.warn(
      'LanguageSwitcher: astroI18n module is required. Please pass the astro:i18n module as a prop.'
    );
  }
}
---

{
  shouldRender && (
    <div class={`cosy:dropdown cosy:dropdown-end ${className}`}>
      <div tabindex="0" role="button" class:list={['cosy:btn cosy:btn-ghost']}>
        <span class="cosy:mr-1">{currentLanguageName}</span>
        <ChevronDownIcon size="16px" class="cosy:w-4 cosy:h-4" />
      </div>
      <ul
        tabindex="0"
        class="cosy:z-[1] cosy:bg-base-100 cosy:shadow cosy:p-2 cosy:rounded-box cosy:w-32 cosy:dropdown-content cosy:menu">
        {links.map((link) => (
          <ListItem>
            <Link href={link.url} active={currentLocale === link.locale}>
              {link.name}
            </Link>
          </ListItem>
        ))}
      </ul>
    </div>
  )
}
