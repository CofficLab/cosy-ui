---
/**
 * @component LanguageSwitcher
 *
 * @description
 * LanguageSwitcher 组件提供一个语言切换下拉菜单，支持多语言网站的语言切换功能。
 * 组件会自动处理 URL 路径，确保在切换语言时保留当前页面路径。
 *
 * @design
 * 设计理念：
 * 1. 简洁直观 - 清晰显示当前语言和可选语言
 * 2. 无缝集成 - 自动处理 URL 路由，保持用户浏览上下文
 * 3. 可定制性 - 支持自定义语言列表和当前语言设置
 * 4. 一致的视觉风格 - 使用与整体设计系统一致的下拉菜单样式
 *
 * @usage
 * 基本用法：
 * ```astro
 * <LanguageSwitcher />
 * ```
 *
 * 自定义语言列表：
 * ```astro
 * <LanguageSwitcher
 *   languages={['zh-cn', 'en']}
 * />
 * ```
 */

import { ChevronDownIcon, LanguageUtil } from '../../index-astro';
import '../../style.ts';

interface Props {
  languages: string[];
}

const { languages = ['zh-cn', 'en'] } = Astro.props;

const currentLocale = Astro.currentLocale;
const currentLanguageName = LanguageUtil.getLanguageName(currentLocale);
---

<!-- 语言切换按钮 -->
<div class="cosy:dropdown cosy:dropdown-end">
  <div tabindex="0" role="button" class:list={['cosy:btn cosy:btn-ghost']}>
    <span class="cosy:mr-1">{currentLanguageName}</span>
    <ChevronDownIcon size="16px" class="cosy:w-4 cosy:h-4" />
  </div>
  <ul
    tabindex="0"
    class="cosy:z-[1] cosy:bg-base-100 cosy:shadow cosy:p-2 cosy:rounded-box cosy:w-32 cosy:dropdown-content cosy:menu">
    {
      languages.map((lang) => (
        <li class={currentLocale === lang ? 'cosy:disabled' : ''}>
          <a
            href={LanguageUtil.getRelativeLink(lang, Astro)}
            class={currentLocale === lang ? 'cosy:active' : ''}>
            {LanguageUtil.getLanguageName(lang)}
          </a>
        </li>
      ))
    }
  </ul>
</div>
