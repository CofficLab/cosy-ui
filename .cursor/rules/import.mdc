---
description: about this project
globs: 
alwaysApply: true
---

# 关于这个项目

这是一个Astro组件库，为同一个组织下的多个项目提供统一的UI风格。

它分成两部分：

- packages/cosy-ui：组件库的源码文件夹
- demo：在开发阶段用来测试这些组件的样本项目

## 和用户交流时

- 使用中文
- 如果用户的要求不合理或不符合该技术的最佳实践，应指出

## 样式系统

- 使用原生 CSS
- 样式相关的代码放在 src/styles
- 样式系统有以下突出的特点：
    - 完全像使用 TailwindCSS 一样
    - 但又弥补了 TailwindCSS 的不足，像 DaisyUI 一样增加了 card、btn 等这样常用的 class

## 图标

- 统一放入 icons 来管理，像 [AlertTriangle.astro](mdc:packages/cosy-ui/src/icons/AlertTriangle.astro) 那样

## Code Style

- 遵循关注点分离原则
- 每个文件指处理单一的一件事
- 单个文件不要过大，适当拆分代码到多个文件中

## Astro 组件

- 使用 Typescript
- 不要忘记 frontmatter
- 考虑到组件可能非常多，应该进行良好的分类，如：
    - components 目录存放普通组件
    - layouts 目录存放页面布局组件
    - 根据情况，可自行创建其他文件夹
- 不要忘记为组件增加使用的例子，比如：
    - 普通组件放在 .../pages/components 目录
    - 布局组件放在 .../pages/layouts 目录
- 在例子中这样导入组件：import { Alert as AlertComponent } from '@coffic/cosy-ui';
- 不要忘了在 main.ts 导出组件
- 不要忘记了像其他组件那样在顶部写清楚文档

## Types

Types 目录在 src/types

## 包管理

使用 PNPM

## 提醒用户

如果这个规则被应用，则在输出中说明：🍋 我注意到了项目的基本信息