---
description: 
globs: 
alwaysApply: true
---
# 组件开发规则

这个规则总结了cosy-ui组件库的开发、修改和优化的最佳实践。

## 组件基本规范

### 1. 样式使用规范
- **必须**导入 [style.ts](mdc:src/style.ts) 在组件顶部
- **优先**使用 daisyUI 的类，如：`card`、`card-body`、`card-title`等
- **辅助**使用 Tailwind CSS，但必须加 `cosy:` 前缀
- **正确示例**：`cosy:mx-auto`、`cosy:dark:bg-red-500`
- **错误示例**：`lg:cosy:mx-auto`（应该是 `cosy:lg:mx-auto`）
- **注意**：not-prose 不需要前缀

### 2. Props接口规范
- Props接口必须与组件文档中的 `@props` 描述**完全一致**
- 如果文档提到某个属性，接口中必须定义
- 参考 [Card.astro](mdc:src/card/Card.astro) 的完整Props定义

### 3. 组件文档规范
- 必须包含完整的JSDoc注释：`@component`、`@description`、`@usage`、`@props`、`@slots`
- 使用示例要覆盖主要功能场景
- Props描述要准确，包含类型和默认值

## 组件Package结构

### 1. 示例组件命名规范
- 基础示例：`E{ComponentName}Basic.astro`
- 功能示例：`E{ComponentName}{FeatureName}.astro`
- 容器组件：`E{ComponentName}{FeatureName}Container.astro`

### 2. 必须创建的示例组件
- **Basic** - 基础用法示例
- **自定义样式** - CustomStyle示例，展示class属性用法
- **功能特性** - 根据组件特点创建对应示例

### 3. Package导出结构
参考 [alert/index.ts](mdc:src/alert/index.ts)：
```typescript
export const ComponentPackage = {
    Component,
    ComponentContainers: {
        Basic: ComponentBasicContainer,
        FeatureName: ComponentFeatureContainer,
        CustomStyle: ComponentCustomStyleContainer,
    },
};
```

### 4. 容器组件规范
- 使用 [CodeContainer](mdc:src/index.ts) 来展示代码
- 导入对应的示例组件和源码（`?raw`）
- 参考 [ECardBasicContainer.astro](mdc:src/card/ECardBasicContainer.astro)

## 组件文档规范

### 1. 文档文件结构
- 中文文档：`docs/courses/zh-cn/components/{component}.mdx`
- 英文文档：`docs/courses/en/components/{component}.mdx`

### 2. 文档内容规范
- frontmatter 必须包含：`title`、`description`、`folder: false`、`order`
- 必须导入：`import { Component, ComponentPackage } from '@cosy/index';`
- 文档结构参考 [alert.mdx](mdc:docs/courses/zh-cn/components/alert.mdx)

### 3. 必须包含的章节
- **简介** - 组件描述和特性
- **基础用法** - `<ComponentPackage.ComponentContainers.Basic/>`
- **功能示例** - 展示各种特性的用法
- **自定义样式** - `<ComponentPackage.ComponentContainers.CustomStyle/>`

## 修复现有组件的步骤

### 1. 检查问题
- 确认是否使用了自定义CSS类而非daisyUI类
- 检查Tailwind类是否正确添加了 `cosy:` 前缀
- 验证Props接口是否与文档描述一致
- 确认是否导入了 [style.ts](mdc:src/style.ts)

### 2. 修复组件
- 替换自定义CSS类为daisyUI标准类
- 添加正确的Tailwind前缀
- 完善Props接口
- 确保功能实现与文档描述一致

### 3. 创建Package结构
- 创建各种示例组件（Basic、功能特性、CustomStyle等）
- 创建对应的容器组件
- 更新index.ts，导出ComponentPackage

### 4. 创建文档
- 创建中英文文档文件
- 按照规范结构编写文档内容
- 确保所有示例都能正常工作

## 常见错误避免

1. **CSS类错误**：不要使用未定义的自定义类
2. **前缀错误**：Tailwind类必须加 `cosy:` 前缀
3. **接口不完整**：Props接口必须与文档一致
4. **导入缺失**：忘记导入 [style.ts](mdc:src/style.ts)
5. **Package缺失**：忘记创建ComponentPackage导致文档中的示例无法工作

## 检查清单

修改/新建组件时，确保以下项目都已完成：

- [ ] 导入 [style.ts](mdc:src/style.ts)
- [ ] 使用daisyUI类和正确的Tailwind前缀
- [ ] Props接口完整且与文档一致
- [ ] 功能实现与文档描述一致
- [ ] 创建了基础示例组件
- [ ] 创建了自定义样式示例
- [ ] 创建了对应的容器组件
- [ ] 更新了index.ts导出ComponentPackage
- [ ] 创建了中英文文档
- [ ] 文档中的所有示例都能正常工作
