---
description: 
globs: 
alwaysApply: false
---
# Cosy Framework 代码与文档同步规则

本规则用于确保 cosy-framework 的代码实现和文档保持同步。

## 文档结构

### 1. 文档位置
- 框架文档位于 `packages/cosy-framework-docs/schedule/` 目录
- 每个主要功能模块都有一个主文档和多个子文档
- 主文档命名格式：`XX-module-name.md`
- 子文档命名格式：`XX.Y-specific-topic.md`

### 2. 文档组织
- 主文档必须包含：
  - 目标说明
  - 子步骤列表
  - 依赖说明
  - 代码组织说明
  - 完成标志
  - 下一步指引

- 子文档必须包含：
  - 具体目标
  - 任务清单
  - 执行步骤
  - 代码示例
  - 完成标志
  - 下一步指引

## 代码与文档同步规则

### 1. 代码实现
- 代码实现必须位于 `packages/cosy-framework/src/` 目录
- 目录结构必须与文档中描述的一致
- 类名、方法名必须与文档中的示例代码匹配
- 必须包含完整的 JSDoc 注释

### 2. 类型定义
- 类型定义必须位于 `packages/cosy-framework/src/types/` 目录
- 接口名称必须与文档中的描述一致
- 必须包含完整的类型注释

### 3. 示例代码
- 文档中的示例代码必须是可运行的
- 示例代码必须使用实际的类型和接口
- 示例代码必须与实际实现保持一致

### 4. 更新流程

当修改代码时：
1. 更新相应的文档
2. 确保文档中的示例代码与新代码一致
3. 更新文档中的类型定义
4. 检查并更新相关的子文档

当修改文档时：
1. 确保代码实现与文档描述一致
2. 更新相关的 JSDoc 注释
3. 验证示例代码的正确性
4. 检查并更新相关的文档

## 文件对应关系

### 核心模块
- [service-provider.ts](mdc:packages/cosy-framework/src/container/service-provider.ts) ↔ [02.4-service-provider.md](mdc:packages/cosy-framework-docs/schedule/02.4-service-provider.md)
- [container.ts](mdc:packages/cosy-framework/src/container/container.ts) ↔ [02.2-container-implementation.md](mdc:packages/cosy-framework-docs/schedule/02.2-container-implementation.md)
- [decorators.ts](mdc:packages/cosy-framework/src/container/decorators.ts) ↔ [02.3-decorators.md](mdc:packages/cosy-framework-docs/schedule/02.3-decorators.md)

### 类型定义
- [types/container.ts](mdc:packages/cosy-framework/src/types/container.ts) ↔ [02.1-container-types.md](mdc:packages/cosy-framework-docs/schedule/02.1-container-types.md)

## 检查清单

修改代码或文档时，确保：

1. **代码一致性**
   - [ ] 类名和方法名与文档匹配
   - [ ] 类型定义与文档一致
   - [ ] JSDoc 注释完整且准确
   - [ ] 示例代码可以运行

2. **文档完整性**
   - [ ] 文档结构符合规范
   - [ ] 示例代码与实现一致
   - [ ] 类型定义准确
   - [ ] 步骤说明清晰

3. **同步验证**
   - [ ] 运行示例代码验证正确性
   - [ ] 检查相关文档更新
   - [ ] 验证类型定义
   - [ ] 确认 JSDoc 注释更新

## 常见问题

1. **代码与文档不一致**
   - 检查最近的代码改动
   - 更新相应的文档部分
   - 验证示例代码

2. **示例代码过时**
   - 使用最新的 API 更新示例
   - 确保示例可以运行
   - 添加必要的注释说明

3. **类型定义不匹配**
   - 同步更新类型文件
   - 更新文档中的类型说明
   - 检查相关的示例代码

4. **文档结构混乱**
   - 遵循文档组织规范
   - 确保主文档和子文档结构完整
   - 保持文档间的连贯性
