---
# 🎉 Cosy UI 正式发布工作流
#
# 这个工作流程用于自动化 Cosy UI 组件库的正式发布过程。
#
# 工作流程说明：
# 1. 开发流程 (dev 分支)：
#    - 在 dev 分支进行日常开发
#    - 提交并推送到 dev 分支
#
# 2. 预发布流程 (pre 分支)：
#    - 将 dev 分支合并到 pre 分支
#    - 自动升级小版本号并发布预发布版本
#
# 3. 正式发布 (main 分支)：
#    - 预发布版本测试通过后
#    - 将 pre 分支合并到 main 分支
#    - 自动移除版本号中的预发布标识
#    - 构建项目
#    - 创建新标签
#    - 发布正式版本
#
# 发布条件：
# - 推送到 main 分支时自动触发
# - 发布为正式版本
#
# 使用方法：
# 1. 日常开发完成后：
#    ```bash
#    git add .
#    git commit -m "feat: your changes"
#    git push origin dev
#    ```
#
# 2. 预发布版本：
#    ```bash
#    git checkout pre
#    git merge dev
#    git push origin pre
#    ```
#
# 3. 正式发布：
#    ```bash
#    git checkout main
#    git merge pre
#    git push origin main
#    ```
#
name: 🎉 Release Cosy UI

on:
  push:
    branches: 
      - main    # 正式发布
    tags:
      - '*'

# 添加工作流级别的权限
permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  statuses: write
  checks: write
  id-token: write

env:
  tag: ${{ github.event.head_commit.id }}
  version: ${{ github.ref_name }}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.9
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install Dependencies
        run: pnpm install
        
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
      - name: Finalize Version
        run: |
          cd packages/cosy-ui
          current_version=$(node -p "require('./package.json').version")
          
          # 如果版本包含预发布标识，则移除它
          if [[ "$current_version" == *"-"* ]]; then
            IFS='-' read -r stable_version prerelease <<< "$current_version"
            new_version="${stable_version}"
          else
            new_version="${current_version}"
          fi
          
          # 更新 package.json 中的版本号
          npm version $new_version --no-git-tag-version
          echo "VERSION=${new_version}" >> $GITHUB_ENV
          
      - name: Build Packages
        run: pnpm build
        
      - name: Commit Version Changes
        run: |
          git add .
          git commit -m "chore: release version ${{ env.VERSION }}"
          git tag v${{ env.VERSION }}
          git push origin main
          git push origin v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_TOKEN }}
          
      - name: Sync Version Changes to Pre and Dev Branches
        run: |
          # 1. 同步到 pre 分支
          # 切换到 pre 分支
          git checkout pre
          
          # 拉取最新的 pre 分支代码
          git pull origin pre
          
          # 将 main 分支上的版本更新合并到 pre 分支
          # 使用 cherry-pick 只合并版本更新的提交
          git cherry-pick -n $(git log -1 --pretty=format:"%H" main)
          
          # 提交更改并推送到 pre 分支
          git add .
          git commit -m "chore: sync version ${{ env.VERSION }} from main branch"
          git push origin pre
          
          # 2. 同步到 dev 分支
          # 切换到 dev 分支
          git checkout dev
          
          # 拉取最新的 dev 分支代码
          git pull origin dev
          
          # 将 main 分支上的版本更新合并到 dev 分支
          # 使用 cherry-pick 只合并版本更新的提交
          git cherry-pick -n $(git log -1 --pretty=format:"%H" main)
          
          # 提交更改并推送到 dev 分支
          git add .
          git commit -m "chore: sync version ${{ env.VERSION }} from main branch"
          git push origin dev
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_TOKEN }}
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          generate_release_notes: true
          prerelease: false
          
      - name: Publish to NPM
        run: |
          cd packages/cosy-ui
          npm publish --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
