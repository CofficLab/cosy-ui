---
# 🎉 Cosy UI 发布工作流
#
# 这个工作流程用于自动化 Cosy UI 组件库的发布过程。
#
# 工作流程说明：
# 1. 开发流程 (dev 分支)：
#    - 在 dev 分支进行日常开发
#    - 提交并推送到 dev 分支
#
# 2. 预发布流程 (pre 分支)：
#    - 将 dev 分支合并到 pre 分支
#    - 自动升级小版本号并发布预发布版本
#
# 3. 正式发布 (main 分支)：
#    - 预发布版本测试通过后
#    - 将 pre 分支合并到 main 分支
#    - 自动移除版本号中的预发布标识
#    - 构建项目
#    - 创建新标签
#    - 发布正式版本
#
# 发布条件：
# - 推送到 pre 分支时触发预发布
# - 推送到 main 分支时触发正式发布
#
# 使用方法：
# 1. 日常开发完成后：
#    ```bash
#    git add .
#    git commit -m "feat: your changes"
#    git push origin dev
#    ```
#
# 2. 预发布版本：
#    ```bash
#    git checkout pre
#    git merge dev
#    git push origin pre
#    ```
#
# 3. 正式发布：
#    ```bash
#    git checkout main
#    git merge pre
#    git push origin main
#    ```
#
name: 📦 Release Cosy UI

on:
  push:
    branches: 
      - pre     # 预发布分支
      - main    # 正式发布分支
    tags:
      - '*'

# 添加工作流级别的权限
permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  statuses: write
  checks: write
  id-token: write

env:
  tag: ${{ github.event.head_commit.id }}
  version: ${{ github.ref_name }}
  is_prerelease: ${{ github.ref == 'refs/heads/pre' }}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9.15.9
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install Dependencies
        run: cd packages/cosy-ui && pnpm install
        
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
      - name: Bump Version
        run: |
          cd packages/cosy-ui
          current_version=$(node -p "require('./package.json').version")
          IFS='.' read -r major minor patch <<< "$current_version"
          
          # 版本升级规则说明:
          # 1. 版本格式遵循 semver 规范: major.minor.patch
          # 2. pre 分支: patch + 1
          # 3. main 分支: patch + 2 (因为 pre 分支已经 +1)
          
          # 如果版本包含预发布标识，则去除它
          if [[ "$patch" == *"-"* ]]; then
            IFS='-' read -r patch_num prerelease <<< "$patch"
            patch=$patch_num
          fi
          
          # 根据分支类型决定版本号增量
          if [[ "${{ github.ref }}" == "refs/heads/pre" ]]; then
            new_patch=$((patch + 1))
          else
            new_patch=$((patch + 2))
          fi
          
          new_version="${major}.${minor}.${new_patch}"
          
          # 更新 package.json 中的版本号
          npm version $new_version --no-git-tag-version
          echo "VERSION=${new_version}" >> $GITHUB_ENV
          
      - name: Build Packages
        run: cd packages/astro && pnpm build
        
      - name: Commit Version Changes
        run: |
          current_branch=${GITHUB_REF#refs/heads/}
          git pull origin $current_branch
          git add .
          git commit -m "👷 CI: ${{ env.is_prerelease == 'true' && 'prerelease' || 'release' }} version ${{ env.VERSION }}"
          git tag v${{ env.VERSION }}
          git push origin $current_branch
          git push origin v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_TOKEN }}
          
      - name: Sync Version Changes
        run: |
          # 根据当前分支决定同步策略
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # main 分支同步到 pre 和 dev
            branches=("pre" "dev")
          else
            # pre 分支只同步到 dev
            branches=("dev")
          fi
          
          # 遍历需要同步的分支
          for branch in "${branches[@]}"; do
            git checkout $branch
            git pull origin $branch
            
            npm version ${{ env.VERSION }} --no-git-tag-version
            
            git add .
            git commit -m "chore: sync version ${{ env.VERSION }} from $current_branch branch"
            git push origin $branch
          done
        env:
          GITHUB_TOKEN: ${{ secrets.COMMIT_TOKEN }}
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          generate_release_notes: true
          prerelease: ${{ env.is_prerelease == 'true' }}
